// Code generated by entc, DO NOT EDIT.

package group

import (
	"time"
)

const (
	// Label holds the string label denoting the group type in the database.
	Label = "group"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldThumbnail holds the string denoting the thumbnail field in the database.
	FieldThumbnail = "thumbnail"
	// FieldViews holds the string denoting the views field in the database.
	FieldViews = "views"
	// FieldSubscribers holds the string denoting the subscribers field in the database.
	FieldSubscribers = "subscribers"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeAdmins holds the string denoting the admins edge name in mutations.
	EdgeAdmins = "admins"
	// EdgeMembers holds the string denoting the members edge name in mutations.
	EdgeMembers = "members"
	// EdgeVideos holds the string denoting the videos edge name in mutations.
	EdgeVideos = "videos"
	// EdgeModerators holds the string denoting the moderators edge name in mutations.
	EdgeModerators = "moderators"
	// EdgeStreamers holds the string denoting the streamers edge name in mutations.
	EdgeStreamers = "streamers"
	// Table holds the table name of the group in the database.
	Table = "groups"
	// AdminsTable is the table that holds the admins relation/edge. The primary key declared below.
	AdminsTable = "group_admins"
	// AdminsInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	AdminsInverseTable = "users"
	// MembersTable is the table that holds the members relation/edge. The primary key declared below.
	MembersTable = "group_members"
	// MembersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	MembersInverseTable = "users"
	// VideosTable is the table that holds the videos relation/edge.
	VideosTable = "videos"
	// VideosInverseTable is the table name for the Video entity.
	// It exists in this package in order to avoid circular dependency with the "video" package.
	VideosInverseTable = "videos"
	// VideosColumn is the table column denoting the videos relation/edge.
	VideosColumn = "group_videos"
	// ModeratorsTable is the table that holds the moderators relation/edge. The primary key declared below.
	ModeratorsTable = "group_moderators"
	// ModeratorsInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ModeratorsInverseTable = "users"
	// StreamersTable is the table that holds the streamers relation/edge. The primary key declared below.
	StreamersTable = "group_streamers"
	// StreamersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	StreamersInverseTable = "users"
)

// Columns holds all SQL columns for group fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldURL,
	FieldThumbnail,
	FieldViews,
	FieldSubscribers,
	FieldCreatedAt,
}

var (
	// AdminsPrimaryKey and AdminsColumn2 are the table columns denoting the
	// primary key for the admins relation (M2M).
	AdminsPrimaryKey = []string{"group_id", "user_id"}
	// MembersPrimaryKey and MembersColumn2 are the table columns denoting the
	// primary key for the members relation (M2M).
	MembersPrimaryKey = []string{"group_id", "user_id"}
	// ModeratorsPrimaryKey and ModeratorsColumn2 are the table columns denoting the
	// primary key for the moderators relation (M2M).
	ModeratorsPrimaryKey = []string{"group_id", "user_id"}
	// StreamersPrimaryKey and StreamersColumn2 are the table columns denoting the
	// primary key for the streamers relation (M2M).
	StreamersPrimaryKey = []string{"group_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)
