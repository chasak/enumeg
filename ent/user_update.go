// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"example.com/enumeg/ent/group"
	"example.com/enumeg/ent/predicate"
	"example.com/enumeg/ent/user"
	"example.com/enumeg/ent/video"
	"github.com/google/uuid"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetUUID sets the "uuid" field.
func (uu *UserUpdate) SetUUID(u uuid.UUID) *UserUpdate {
	uu.mutation.SetUUID(u)
	return uu
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUUID(u *uuid.UUID) *UserUpdate {
	if u != nil {
		uu.SetUUID(*u)
	}
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// AddJoinedGroupIDs adds the "joined_groups" edge to the Group entity by IDs.
func (uu *UserUpdate) AddJoinedGroupIDs(ids ...int) *UserUpdate {
	uu.mutation.AddJoinedGroupIDs(ids...)
	return uu
}

// AddJoinedGroups adds the "joined_groups" edges to the Group entity.
func (uu *UserUpdate) AddJoinedGroups(g ...*Group) *UserUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.AddJoinedGroupIDs(ids...)
}

// AddModeratingGroupIDs adds the "moderating_groups" edge to the Group entity by IDs.
func (uu *UserUpdate) AddModeratingGroupIDs(ids ...int) *UserUpdate {
	uu.mutation.AddModeratingGroupIDs(ids...)
	return uu
}

// AddModeratingGroups adds the "moderating_groups" edges to the Group entity.
func (uu *UserUpdate) AddModeratingGroups(g ...*Group) *UserUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.AddModeratingGroupIDs(ids...)
}

// AddStreamingGroupIDs adds the "streaming_groups" edge to the Group entity by IDs.
func (uu *UserUpdate) AddStreamingGroupIDs(ids ...int) *UserUpdate {
	uu.mutation.AddStreamingGroupIDs(ids...)
	return uu
}

// AddStreamingGroups adds the "streaming_groups" edges to the Group entity.
func (uu *UserUpdate) AddStreamingGroups(g ...*Group) *UserUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.AddStreamingGroupIDs(ids...)
}

// AddAdminGroupIDs adds the "admin_groups" edge to the Group entity by IDs.
func (uu *UserUpdate) AddAdminGroupIDs(ids ...int) *UserUpdate {
	uu.mutation.AddAdminGroupIDs(ids...)
	return uu
}

// AddAdminGroups adds the "admin_groups" edges to the Group entity.
func (uu *UserUpdate) AddAdminGroups(g ...*Group) *UserUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.AddAdminGroupIDs(ids...)
}

// AddStreamVideoIDs adds the "stream_videos" edge to the Video entity by IDs.
func (uu *UserUpdate) AddStreamVideoIDs(ids ...int) *UserUpdate {
	uu.mutation.AddStreamVideoIDs(ids...)
	return uu
}

// AddStreamVideos adds the "stream_videos" edges to the Video entity.
func (uu *UserUpdate) AddStreamVideos(v ...*Video) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uu.AddStreamVideoIDs(ids...)
}

// AddLikedVideoIDs adds the "liked_videos" edge to the Video entity by IDs.
func (uu *UserUpdate) AddLikedVideoIDs(ids ...int) *UserUpdate {
	uu.mutation.AddLikedVideoIDs(ids...)
	return uu
}

// AddLikedVideos adds the "liked_videos" edges to the Video entity.
func (uu *UserUpdate) AddLikedVideos(v ...*Video) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uu.AddLikedVideoIDs(ids...)
}

// AddViewedVideoIDs adds the "viewed_videos" edge to the Video entity by IDs.
func (uu *UserUpdate) AddViewedVideoIDs(ids ...int) *UserUpdate {
	uu.mutation.AddViewedVideoIDs(ids...)
	return uu
}

// AddViewedVideos adds the "viewed_videos" edges to the Video entity.
func (uu *UserUpdate) AddViewedVideos(v ...*Video) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uu.AddViewedVideoIDs(ids...)
}

// AddModeratedVideoIDs adds the "moderated_videos" edge to the Video entity by IDs.
func (uu *UserUpdate) AddModeratedVideoIDs(ids ...int) *UserUpdate {
	uu.mutation.AddModeratedVideoIDs(ids...)
	return uu
}

// AddModeratedVideos adds the "moderated_videos" edges to the Video entity.
func (uu *UserUpdate) AddModeratedVideos(v ...*Video) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uu.AddModeratedVideoIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearJoinedGroups clears all "joined_groups" edges to the Group entity.
func (uu *UserUpdate) ClearJoinedGroups() *UserUpdate {
	uu.mutation.ClearJoinedGroups()
	return uu
}

// RemoveJoinedGroupIDs removes the "joined_groups" edge to Group entities by IDs.
func (uu *UserUpdate) RemoveJoinedGroupIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveJoinedGroupIDs(ids...)
	return uu
}

// RemoveJoinedGroups removes "joined_groups" edges to Group entities.
func (uu *UserUpdate) RemoveJoinedGroups(g ...*Group) *UserUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.RemoveJoinedGroupIDs(ids...)
}

// ClearModeratingGroups clears all "moderating_groups" edges to the Group entity.
func (uu *UserUpdate) ClearModeratingGroups() *UserUpdate {
	uu.mutation.ClearModeratingGroups()
	return uu
}

// RemoveModeratingGroupIDs removes the "moderating_groups" edge to Group entities by IDs.
func (uu *UserUpdate) RemoveModeratingGroupIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveModeratingGroupIDs(ids...)
	return uu
}

// RemoveModeratingGroups removes "moderating_groups" edges to Group entities.
func (uu *UserUpdate) RemoveModeratingGroups(g ...*Group) *UserUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.RemoveModeratingGroupIDs(ids...)
}

// ClearStreamingGroups clears all "streaming_groups" edges to the Group entity.
func (uu *UserUpdate) ClearStreamingGroups() *UserUpdate {
	uu.mutation.ClearStreamingGroups()
	return uu
}

// RemoveStreamingGroupIDs removes the "streaming_groups" edge to Group entities by IDs.
func (uu *UserUpdate) RemoveStreamingGroupIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveStreamingGroupIDs(ids...)
	return uu
}

// RemoveStreamingGroups removes "streaming_groups" edges to Group entities.
func (uu *UserUpdate) RemoveStreamingGroups(g ...*Group) *UserUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.RemoveStreamingGroupIDs(ids...)
}

// ClearAdminGroups clears all "admin_groups" edges to the Group entity.
func (uu *UserUpdate) ClearAdminGroups() *UserUpdate {
	uu.mutation.ClearAdminGroups()
	return uu
}

// RemoveAdminGroupIDs removes the "admin_groups" edge to Group entities by IDs.
func (uu *UserUpdate) RemoveAdminGroupIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveAdminGroupIDs(ids...)
	return uu
}

// RemoveAdminGroups removes "admin_groups" edges to Group entities.
func (uu *UserUpdate) RemoveAdminGroups(g ...*Group) *UserUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.RemoveAdminGroupIDs(ids...)
}

// ClearStreamVideos clears all "stream_videos" edges to the Video entity.
func (uu *UserUpdate) ClearStreamVideos() *UserUpdate {
	uu.mutation.ClearStreamVideos()
	return uu
}

// RemoveStreamVideoIDs removes the "stream_videos" edge to Video entities by IDs.
func (uu *UserUpdate) RemoveStreamVideoIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveStreamVideoIDs(ids...)
	return uu
}

// RemoveStreamVideos removes "stream_videos" edges to Video entities.
func (uu *UserUpdate) RemoveStreamVideos(v ...*Video) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uu.RemoveStreamVideoIDs(ids...)
}

// ClearLikedVideos clears all "liked_videos" edges to the Video entity.
func (uu *UserUpdate) ClearLikedVideos() *UserUpdate {
	uu.mutation.ClearLikedVideos()
	return uu
}

// RemoveLikedVideoIDs removes the "liked_videos" edge to Video entities by IDs.
func (uu *UserUpdate) RemoveLikedVideoIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveLikedVideoIDs(ids...)
	return uu
}

// RemoveLikedVideos removes "liked_videos" edges to Video entities.
func (uu *UserUpdate) RemoveLikedVideos(v ...*Video) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uu.RemoveLikedVideoIDs(ids...)
}

// ClearViewedVideos clears all "viewed_videos" edges to the Video entity.
func (uu *UserUpdate) ClearViewedVideos() *UserUpdate {
	uu.mutation.ClearViewedVideos()
	return uu
}

// RemoveViewedVideoIDs removes the "viewed_videos" edge to Video entities by IDs.
func (uu *UserUpdate) RemoveViewedVideoIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveViewedVideoIDs(ids...)
	return uu
}

// RemoveViewedVideos removes "viewed_videos" edges to Video entities.
func (uu *UserUpdate) RemoveViewedVideos(v ...*Video) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uu.RemoveViewedVideoIDs(ids...)
}

// ClearModeratedVideos clears all "moderated_videos" edges to the Video entity.
func (uu *UserUpdate) ClearModeratedVideos() *UserUpdate {
	uu.mutation.ClearModeratedVideos()
	return uu
}

// RemoveModeratedVideoIDs removes the "moderated_videos" edge to Video entities by IDs.
func (uu *UserUpdate) RemoveModeratedVideoIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveModeratedVideoIDs(ids...)
	return uu
}

// RemoveModeratedVideos removes "moderated_videos" edges to Video entities.
func (uu *UserUpdate) RemoveModeratedVideos(v ...*Video) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uu.RemoveModeratedVideoIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(uu.hooks) == 0 {
		affected, err = uu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uu.mutation = mutation
			affected, err = uu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uu.hooks) - 1; i >= 0; i-- {
			if uu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldName,
		})
	}
	if value, ok := uu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: user.FieldUUID,
		})
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassword,
		})
	}
	if uu.mutation.JoinedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.JoinedGroupsTable,
			Columns: user.JoinedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedJoinedGroupsIDs(); len(nodes) > 0 && !uu.mutation.JoinedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.JoinedGroupsTable,
			Columns: user.JoinedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.JoinedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.JoinedGroupsTable,
			Columns: user.JoinedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ModeratingGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.ModeratingGroupsTable,
			Columns: user.ModeratingGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedModeratingGroupsIDs(); len(nodes) > 0 && !uu.mutation.ModeratingGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.ModeratingGroupsTable,
			Columns: user.ModeratingGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ModeratingGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.ModeratingGroupsTable,
			Columns: user.ModeratingGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.StreamingGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.StreamingGroupsTable,
			Columns: user.StreamingGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedStreamingGroupsIDs(); len(nodes) > 0 && !uu.mutation.StreamingGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.StreamingGroupsTable,
			Columns: user.StreamingGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.StreamingGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.StreamingGroupsTable,
			Columns: user.StreamingGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.AdminGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.AdminGroupsTable,
			Columns: user.AdminGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedAdminGroupsIDs(); len(nodes) > 0 && !uu.mutation.AdminGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.AdminGroupsTable,
			Columns: user.AdminGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.AdminGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.AdminGroupsTable,
			Columns: user.AdminGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.StreamVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.StreamVideosTable,
			Columns: user.StreamVideosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: video.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedStreamVideosIDs(); len(nodes) > 0 && !uu.mutation.StreamVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.StreamVideosTable,
			Columns: user.StreamVideosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: video.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.StreamVideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.StreamVideosTable,
			Columns: user.StreamVideosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: video.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.LikedVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.LikedVideosTable,
			Columns: user.LikedVideosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: video.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedLikedVideosIDs(); len(nodes) > 0 && !uu.mutation.LikedVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.LikedVideosTable,
			Columns: user.LikedVideosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: video.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.LikedVideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.LikedVideosTable,
			Columns: user.LikedVideosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: video.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ViewedVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ViewedVideosTable,
			Columns: user.ViewedVideosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: video.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedViewedVideosIDs(); len(nodes) > 0 && !uu.mutation.ViewedVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ViewedVideosTable,
			Columns: user.ViewedVideosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: video.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ViewedVideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ViewedVideosTable,
			Columns: user.ViewedVideosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: video.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ModeratedVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ModeratedVideosTable,
			Columns: user.ModeratedVideosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: video.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedModeratedVideosIDs(); len(nodes) > 0 && !uu.mutation.ModeratedVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ModeratedVideosTable,
			Columns: user.ModeratedVideosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: video.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ModeratedVideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ModeratedVideosTable,
			Columns: user.ModeratedVideosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: video.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetUUID sets the "uuid" field.
func (uuo *UserUpdateOne) SetUUID(u uuid.UUID) *UserUpdateOne {
	uuo.mutation.SetUUID(u)
	return uuo
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUUID(u *uuid.UUID) *UserUpdateOne {
	if u != nil {
		uuo.SetUUID(*u)
	}
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// AddJoinedGroupIDs adds the "joined_groups" edge to the Group entity by IDs.
func (uuo *UserUpdateOne) AddJoinedGroupIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddJoinedGroupIDs(ids...)
	return uuo
}

// AddJoinedGroups adds the "joined_groups" edges to the Group entity.
func (uuo *UserUpdateOne) AddJoinedGroups(g ...*Group) *UserUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.AddJoinedGroupIDs(ids...)
}

// AddModeratingGroupIDs adds the "moderating_groups" edge to the Group entity by IDs.
func (uuo *UserUpdateOne) AddModeratingGroupIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddModeratingGroupIDs(ids...)
	return uuo
}

// AddModeratingGroups adds the "moderating_groups" edges to the Group entity.
func (uuo *UserUpdateOne) AddModeratingGroups(g ...*Group) *UserUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.AddModeratingGroupIDs(ids...)
}

// AddStreamingGroupIDs adds the "streaming_groups" edge to the Group entity by IDs.
func (uuo *UserUpdateOne) AddStreamingGroupIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddStreamingGroupIDs(ids...)
	return uuo
}

// AddStreamingGroups adds the "streaming_groups" edges to the Group entity.
func (uuo *UserUpdateOne) AddStreamingGroups(g ...*Group) *UserUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.AddStreamingGroupIDs(ids...)
}

// AddAdminGroupIDs adds the "admin_groups" edge to the Group entity by IDs.
func (uuo *UserUpdateOne) AddAdminGroupIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddAdminGroupIDs(ids...)
	return uuo
}

// AddAdminGroups adds the "admin_groups" edges to the Group entity.
func (uuo *UserUpdateOne) AddAdminGroups(g ...*Group) *UserUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.AddAdminGroupIDs(ids...)
}

// AddStreamVideoIDs adds the "stream_videos" edge to the Video entity by IDs.
func (uuo *UserUpdateOne) AddStreamVideoIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddStreamVideoIDs(ids...)
	return uuo
}

// AddStreamVideos adds the "stream_videos" edges to the Video entity.
func (uuo *UserUpdateOne) AddStreamVideos(v ...*Video) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uuo.AddStreamVideoIDs(ids...)
}

// AddLikedVideoIDs adds the "liked_videos" edge to the Video entity by IDs.
func (uuo *UserUpdateOne) AddLikedVideoIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddLikedVideoIDs(ids...)
	return uuo
}

// AddLikedVideos adds the "liked_videos" edges to the Video entity.
func (uuo *UserUpdateOne) AddLikedVideos(v ...*Video) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uuo.AddLikedVideoIDs(ids...)
}

// AddViewedVideoIDs adds the "viewed_videos" edge to the Video entity by IDs.
func (uuo *UserUpdateOne) AddViewedVideoIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddViewedVideoIDs(ids...)
	return uuo
}

// AddViewedVideos adds the "viewed_videos" edges to the Video entity.
func (uuo *UserUpdateOne) AddViewedVideos(v ...*Video) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uuo.AddViewedVideoIDs(ids...)
}

// AddModeratedVideoIDs adds the "moderated_videos" edge to the Video entity by IDs.
func (uuo *UserUpdateOne) AddModeratedVideoIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddModeratedVideoIDs(ids...)
	return uuo
}

// AddModeratedVideos adds the "moderated_videos" edges to the Video entity.
func (uuo *UserUpdateOne) AddModeratedVideos(v ...*Video) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uuo.AddModeratedVideoIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearJoinedGroups clears all "joined_groups" edges to the Group entity.
func (uuo *UserUpdateOne) ClearJoinedGroups() *UserUpdateOne {
	uuo.mutation.ClearJoinedGroups()
	return uuo
}

// RemoveJoinedGroupIDs removes the "joined_groups" edge to Group entities by IDs.
func (uuo *UserUpdateOne) RemoveJoinedGroupIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveJoinedGroupIDs(ids...)
	return uuo
}

// RemoveJoinedGroups removes "joined_groups" edges to Group entities.
func (uuo *UserUpdateOne) RemoveJoinedGroups(g ...*Group) *UserUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.RemoveJoinedGroupIDs(ids...)
}

// ClearModeratingGroups clears all "moderating_groups" edges to the Group entity.
func (uuo *UserUpdateOne) ClearModeratingGroups() *UserUpdateOne {
	uuo.mutation.ClearModeratingGroups()
	return uuo
}

// RemoveModeratingGroupIDs removes the "moderating_groups" edge to Group entities by IDs.
func (uuo *UserUpdateOne) RemoveModeratingGroupIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveModeratingGroupIDs(ids...)
	return uuo
}

// RemoveModeratingGroups removes "moderating_groups" edges to Group entities.
func (uuo *UserUpdateOne) RemoveModeratingGroups(g ...*Group) *UserUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.RemoveModeratingGroupIDs(ids...)
}

// ClearStreamingGroups clears all "streaming_groups" edges to the Group entity.
func (uuo *UserUpdateOne) ClearStreamingGroups() *UserUpdateOne {
	uuo.mutation.ClearStreamingGroups()
	return uuo
}

// RemoveStreamingGroupIDs removes the "streaming_groups" edge to Group entities by IDs.
func (uuo *UserUpdateOne) RemoveStreamingGroupIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveStreamingGroupIDs(ids...)
	return uuo
}

// RemoveStreamingGroups removes "streaming_groups" edges to Group entities.
func (uuo *UserUpdateOne) RemoveStreamingGroups(g ...*Group) *UserUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.RemoveStreamingGroupIDs(ids...)
}

// ClearAdminGroups clears all "admin_groups" edges to the Group entity.
func (uuo *UserUpdateOne) ClearAdminGroups() *UserUpdateOne {
	uuo.mutation.ClearAdminGroups()
	return uuo
}

// RemoveAdminGroupIDs removes the "admin_groups" edge to Group entities by IDs.
func (uuo *UserUpdateOne) RemoveAdminGroupIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveAdminGroupIDs(ids...)
	return uuo
}

// RemoveAdminGroups removes "admin_groups" edges to Group entities.
func (uuo *UserUpdateOne) RemoveAdminGroups(g ...*Group) *UserUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.RemoveAdminGroupIDs(ids...)
}

// ClearStreamVideos clears all "stream_videos" edges to the Video entity.
func (uuo *UserUpdateOne) ClearStreamVideos() *UserUpdateOne {
	uuo.mutation.ClearStreamVideos()
	return uuo
}

// RemoveStreamVideoIDs removes the "stream_videos" edge to Video entities by IDs.
func (uuo *UserUpdateOne) RemoveStreamVideoIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveStreamVideoIDs(ids...)
	return uuo
}

// RemoveStreamVideos removes "stream_videos" edges to Video entities.
func (uuo *UserUpdateOne) RemoveStreamVideos(v ...*Video) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uuo.RemoveStreamVideoIDs(ids...)
}

// ClearLikedVideos clears all "liked_videos" edges to the Video entity.
func (uuo *UserUpdateOne) ClearLikedVideos() *UserUpdateOne {
	uuo.mutation.ClearLikedVideos()
	return uuo
}

// RemoveLikedVideoIDs removes the "liked_videos" edge to Video entities by IDs.
func (uuo *UserUpdateOne) RemoveLikedVideoIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveLikedVideoIDs(ids...)
	return uuo
}

// RemoveLikedVideos removes "liked_videos" edges to Video entities.
func (uuo *UserUpdateOne) RemoveLikedVideos(v ...*Video) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uuo.RemoveLikedVideoIDs(ids...)
}

// ClearViewedVideos clears all "viewed_videos" edges to the Video entity.
func (uuo *UserUpdateOne) ClearViewedVideos() *UserUpdateOne {
	uuo.mutation.ClearViewedVideos()
	return uuo
}

// RemoveViewedVideoIDs removes the "viewed_videos" edge to Video entities by IDs.
func (uuo *UserUpdateOne) RemoveViewedVideoIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveViewedVideoIDs(ids...)
	return uuo
}

// RemoveViewedVideos removes "viewed_videos" edges to Video entities.
func (uuo *UserUpdateOne) RemoveViewedVideos(v ...*Video) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uuo.RemoveViewedVideoIDs(ids...)
}

// ClearModeratedVideos clears all "moderated_videos" edges to the Video entity.
func (uuo *UserUpdateOne) ClearModeratedVideos() *UserUpdateOne {
	uuo.mutation.ClearModeratedVideos()
	return uuo
}

// RemoveModeratedVideoIDs removes the "moderated_videos" edge to Video entities by IDs.
func (uuo *UserUpdateOne) RemoveModeratedVideoIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveModeratedVideoIDs(ids...)
	return uuo
}

// RemoveModeratedVideos removes "moderated_videos" edges to Video entities.
func (uuo *UserUpdateOne) RemoveModeratedVideos(v ...*Video) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return uuo.RemoveModeratedVideoIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	var (
		err  error
		node *User
	)
	if len(uuo.hooks) == 0 {
		node, err = uuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uuo.mutation = mutation
			node, err = uuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uuo.hooks) - 1; i >= 0; i-- {
			if uuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldName,
		})
	}
	if value, ok := uuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: user.FieldUUID,
		})
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassword,
		})
	}
	if uuo.mutation.JoinedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.JoinedGroupsTable,
			Columns: user.JoinedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedJoinedGroupsIDs(); len(nodes) > 0 && !uuo.mutation.JoinedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.JoinedGroupsTable,
			Columns: user.JoinedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.JoinedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.JoinedGroupsTable,
			Columns: user.JoinedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ModeratingGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.ModeratingGroupsTable,
			Columns: user.ModeratingGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedModeratingGroupsIDs(); len(nodes) > 0 && !uuo.mutation.ModeratingGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.ModeratingGroupsTable,
			Columns: user.ModeratingGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ModeratingGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.ModeratingGroupsTable,
			Columns: user.ModeratingGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.StreamingGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.StreamingGroupsTable,
			Columns: user.StreamingGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedStreamingGroupsIDs(); len(nodes) > 0 && !uuo.mutation.StreamingGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.StreamingGroupsTable,
			Columns: user.StreamingGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.StreamingGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.StreamingGroupsTable,
			Columns: user.StreamingGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.AdminGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.AdminGroupsTable,
			Columns: user.AdminGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedAdminGroupsIDs(); len(nodes) > 0 && !uuo.mutation.AdminGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.AdminGroupsTable,
			Columns: user.AdminGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.AdminGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.AdminGroupsTable,
			Columns: user.AdminGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.StreamVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.StreamVideosTable,
			Columns: user.StreamVideosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: video.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedStreamVideosIDs(); len(nodes) > 0 && !uuo.mutation.StreamVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.StreamVideosTable,
			Columns: user.StreamVideosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: video.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.StreamVideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.StreamVideosTable,
			Columns: user.StreamVideosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: video.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.LikedVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.LikedVideosTable,
			Columns: user.LikedVideosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: video.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedLikedVideosIDs(); len(nodes) > 0 && !uuo.mutation.LikedVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.LikedVideosTable,
			Columns: user.LikedVideosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: video.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.LikedVideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.LikedVideosTable,
			Columns: user.LikedVideosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: video.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ViewedVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ViewedVideosTable,
			Columns: user.ViewedVideosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: video.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedViewedVideosIDs(); len(nodes) > 0 && !uuo.mutation.ViewedVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ViewedVideosTable,
			Columns: user.ViewedVideosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: video.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ViewedVideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ViewedVideosTable,
			Columns: user.ViewedVideosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: video.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ModeratedVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ModeratedVideosTable,
			Columns: user.ModeratedVideosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: video.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedModeratedVideosIDs(); len(nodes) > 0 && !uuo.mutation.ModeratedVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ModeratedVideosTable,
			Columns: user.ModeratedVideosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: video.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ModeratedVideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.ModeratedVideosTable,
			Columns: user.ModeratedVideosPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: video.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
