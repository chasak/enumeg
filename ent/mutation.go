// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"example.com/enumeg/ent/group"
	"example.com/enumeg/ent/predicate"
	"example.com/enumeg/ent/user"
	"example.com/enumeg/ent/video"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeGroup = "Group"
	TypeUser  = "User"
	TypeVideo = "Video"
)

// GroupMutation represents an operation that mutates the Group nodes in the graph.
type GroupMutation struct {
	config
	op                Op
	typ               string
	id                *int
	name              *string
	clearedFields     map[string]struct{}
	admins            map[int]struct{}
	removedadmins     map[int]struct{}
	clearedadmins     bool
	members           map[int]struct{}
	removedmembers    map[int]struct{}
	clearedmembers    bool
	videos            map[int]struct{}
	removedvideos     map[int]struct{}
	clearedvideos     bool
	moderators        map[int]struct{}
	removedmoderators map[int]struct{}
	clearedmoderators bool
	streamers         map[int]struct{}
	removedstreamers  map[int]struct{}
	clearedstreamers  bool
	done              bool
	oldValue          func(context.Context) (*Group, error)
	predicates        []predicate.Group
}

var _ ent.Mutation = (*GroupMutation)(nil)

// groupOption allows management of the mutation configuration using functional options.
type groupOption func(*GroupMutation)

// newGroupMutation creates new mutation for the Group entity.
func newGroupMutation(c config, op Op, opts ...groupOption) *GroupMutation {
	m := &GroupMutation{
		config:        c,
		op:            op,
		typ:           TypeGroup,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGroupID sets the ID field of the mutation.
func withGroupID(id int) groupOption {
	return func(m *GroupMutation) {
		var (
			err   error
			once  sync.Once
			value *Group
		)
		m.oldValue = func(ctx context.Context) (*Group, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Group.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGroup sets the old Group of the mutation.
func withGroup(node *Group) groupOption {
	return func(m *GroupMutation) {
		m.oldValue = func(context.Context) (*Group, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GroupMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GroupMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GroupMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GroupMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Group.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *GroupMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *GroupMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *GroupMutation) ResetName() {
	m.name = nil
}

// AddAdminIDs adds the "admins" edge to the User entity by ids.
func (m *GroupMutation) AddAdminIDs(ids ...int) {
	if m.admins == nil {
		m.admins = make(map[int]struct{})
	}
	for i := range ids {
		m.admins[ids[i]] = struct{}{}
	}
}

// ClearAdmins clears the "admins" edge to the User entity.
func (m *GroupMutation) ClearAdmins() {
	m.clearedadmins = true
}

// AdminsCleared reports if the "admins" edge to the User entity was cleared.
func (m *GroupMutation) AdminsCleared() bool {
	return m.clearedadmins
}

// RemoveAdminIDs removes the "admins" edge to the User entity by IDs.
func (m *GroupMutation) RemoveAdminIDs(ids ...int) {
	if m.removedadmins == nil {
		m.removedadmins = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.admins, ids[i])
		m.removedadmins[ids[i]] = struct{}{}
	}
}

// RemovedAdmins returns the removed IDs of the "admins" edge to the User entity.
func (m *GroupMutation) RemovedAdminsIDs() (ids []int) {
	for id := range m.removedadmins {
		ids = append(ids, id)
	}
	return
}

// AdminsIDs returns the "admins" edge IDs in the mutation.
func (m *GroupMutation) AdminsIDs() (ids []int) {
	for id := range m.admins {
		ids = append(ids, id)
	}
	return
}

// ResetAdmins resets all changes to the "admins" edge.
func (m *GroupMutation) ResetAdmins() {
	m.admins = nil
	m.clearedadmins = false
	m.removedadmins = nil
}

// AddMemberIDs adds the "members" edge to the User entity by ids.
func (m *GroupMutation) AddMemberIDs(ids ...int) {
	if m.members == nil {
		m.members = make(map[int]struct{})
	}
	for i := range ids {
		m.members[ids[i]] = struct{}{}
	}
}

// ClearMembers clears the "members" edge to the User entity.
func (m *GroupMutation) ClearMembers() {
	m.clearedmembers = true
}

// MembersCleared reports if the "members" edge to the User entity was cleared.
func (m *GroupMutation) MembersCleared() bool {
	return m.clearedmembers
}

// RemoveMemberIDs removes the "members" edge to the User entity by IDs.
func (m *GroupMutation) RemoveMemberIDs(ids ...int) {
	if m.removedmembers == nil {
		m.removedmembers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.members, ids[i])
		m.removedmembers[ids[i]] = struct{}{}
	}
}

// RemovedMembers returns the removed IDs of the "members" edge to the User entity.
func (m *GroupMutation) RemovedMembersIDs() (ids []int) {
	for id := range m.removedmembers {
		ids = append(ids, id)
	}
	return
}

// MembersIDs returns the "members" edge IDs in the mutation.
func (m *GroupMutation) MembersIDs() (ids []int) {
	for id := range m.members {
		ids = append(ids, id)
	}
	return
}

// ResetMembers resets all changes to the "members" edge.
func (m *GroupMutation) ResetMembers() {
	m.members = nil
	m.clearedmembers = false
	m.removedmembers = nil
}

// AddVideoIDs adds the "videos" edge to the Video entity by ids.
func (m *GroupMutation) AddVideoIDs(ids ...int) {
	if m.videos == nil {
		m.videos = make(map[int]struct{})
	}
	for i := range ids {
		m.videos[ids[i]] = struct{}{}
	}
}

// ClearVideos clears the "videos" edge to the Video entity.
func (m *GroupMutation) ClearVideos() {
	m.clearedvideos = true
}

// VideosCleared reports if the "videos" edge to the Video entity was cleared.
func (m *GroupMutation) VideosCleared() bool {
	return m.clearedvideos
}

// RemoveVideoIDs removes the "videos" edge to the Video entity by IDs.
func (m *GroupMutation) RemoveVideoIDs(ids ...int) {
	if m.removedvideos == nil {
		m.removedvideos = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.videos, ids[i])
		m.removedvideos[ids[i]] = struct{}{}
	}
}

// RemovedVideos returns the removed IDs of the "videos" edge to the Video entity.
func (m *GroupMutation) RemovedVideosIDs() (ids []int) {
	for id := range m.removedvideos {
		ids = append(ids, id)
	}
	return
}

// VideosIDs returns the "videos" edge IDs in the mutation.
func (m *GroupMutation) VideosIDs() (ids []int) {
	for id := range m.videos {
		ids = append(ids, id)
	}
	return
}

// ResetVideos resets all changes to the "videos" edge.
func (m *GroupMutation) ResetVideos() {
	m.videos = nil
	m.clearedvideos = false
	m.removedvideos = nil
}

// AddModeratorIDs adds the "moderators" edge to the User entity by ids.
func (m *GroupMutation) AddModeratorIDs(ids ...int) {
	if m.moderators == nil {
		m.moderators = make(map[int]struct{})
	}
	for i := range ids {
		m.moderators[ids[i]] = struct{}{}
	}
}

// ClearModerators clears the "moderators" edge to the User entity.
func (m *GroupMutation) ClearModerators() {
	m.clearedmoderators = true
}

// ModeratorsCleared reports if the "moderators" edge to the User entity was cleared.
func (m *GroupMutation) ModeratorsCleared() bool {
	return m.clearedmoderators
}

// RemoveModeratorIDs removes the "moderators" edge to the User entity by IDs.
func (m *GroupMutation) RemoveModeratorIDs(ids ...int) {
	if m.removedmoderators == nil {
		m.removedmoderators = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.moderators, ids[i])
		m.removedmoderators[ids[i]] = struct{}{}
	}
}

// RemovedModerators returns the removed IDs of the "moderators" edge to the User entity.
func (m *GroupMutation) RemovedModeratorsIDs() (ids []int) {
	for id := range m.removedmoderators {
		ids = append(ids, id)
	}
	return
}

// ModeratorsIDs returns the "moderators" edge IDs in the mutation.
func (m *GroupMutation) ModeratorsIDs() (ids []int) {
	for id := range m.moderators {
		ids = append(ids, id)
	}
	return
}

// ResetModerators resets all changes to the "moderators" edge.
func (m *GroupMutation) ResetModerators() {
	m.moderators = nil
	m.clearedmoderators = false
	m.removedmoderators = nil
}

// AddStreamerIDs adds the "streamers" edge to the User entity by ids.
func (m *GroupMutation) AddStreamerIDs(ids ...int) {
	if m.streamers == nil {
		m.streamers = make(map[int]struct{})
	}
	for i := range ids {
		m.streamers[ids[i]] = struct{}{}
	}
}

// ClearStreamers clears the "streamers" edge to the User entity.
func (m *GroupMutation) ClearStreamers() {
	m.clearedstreamers = true
}

// StreamersCleared reports if the "streamers" edge to the User entity was cleared.
func (m *GroupMutation) StreamersCleared() bool {
	return m.clearedstreamers
}

// RemoveStreamerIDs removes the "streamers" edge to the User entity by IDs.
func (m *GroupMutation) RemoveStreamerIDs(ids ...int) {
	if m.removedstreamers == nil {
		m.removedstreamers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.streamers, ids[i])
		m.removedstreamers[ids[i]] = struct{}{}
	}
}

// RemovedStreamers returns the removed IDs of the "streamers" edge to the User entity.
func (m *GroupMutation) RemovedStreamersIDs() (ids []int) {
	for id := range m.removedstreamers {
		ids = append(ids, id)
	}
	return
}

// StreamersIDs returns the "streamers" edge IDs in the mutation.
func (m *GroupMutation) StreamersIDs() (ids []int) {
	for id := range m.streamers {
		ids = append(ids, id)
	}
	return
}

// ResetStreamers resets all changes to the "streamers" edge.
func (m *GroupMutation) ResetStreamers() {
	m.streamers = nil
	m.clearedstreamers = false
	m.removedstreamers = nil
}

// Where appends a list predicates to the GroupMutation builder.
func (m *GroupMutation) Where(ps ...predicate.Group) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GroupMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Group).
func (m *GroupMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GroupMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, group.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GroupMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case group.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GroupMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case group.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Group field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) SetField(name string, value ent.Value) error {
	switch name {
	case group.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GroupMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GroupMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Group numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GroupMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GroupMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GroupMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Group nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GroupMutation) ResetField(name string) error {
	switch name {
	case group.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GroupMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.admins != nil {
		edges = append(edges, group.EdgeAdmins)
	}
	if m.members != nil {
		edges = append(edges, group.EdgeMembers)
	}
	if m.videos != nil {
		edges = append(edges, group.EdgeVideos)
	}
	if m.moderators != nil {
		edges = append(edges, group.EdgeModerators)
	}
	if m.streamers != nil {
		edges = append(edges, group.EdgeStreamers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GroupMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeAdmins:
		ids := make([]ent.Value, 0, len(m.admins))
		for id := range m.admins {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeMembers:
		ids := make([]ent.Value, 0, len(m.members))
		for id := range m.members {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeVideos:
		ids := make([]ent.Value, 0, len(m.videos))
		for id := range m.videos {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeModerators:
		ids := make([]ent.Value, 0, len(m.moderators))
		for id := range m.moderators {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeStreamers:
		ids := make([]ent.Value, 0, len(m.streamers))
		for id := range m.streamers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GroupMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedadmins != nil {
		edges = append(edges, group.EdgeAdmins)
	}
	if m.removedmembers != nil {
		edges = append(edges, group.EdgeMembers)
	}
	if m.removedvideos != nil {
		edges = append(edges, group.EdgeVideos)
	}
	if m.removedmoderators != nil {
		edges = append(edges, group.EdgeModerators)
	}
	if m.removedstreamers != nil {
		edges = append(edges, group.EdgeStreamers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GroupMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeAdmins:
		ids := make([]ent.Value, 0, len(m.removedadmins))
		for id := range m.removedadmins {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeMembers:
		ids := make([]ent.Value, 0, len(m.removedmembers))
		for id := range m.removedmembers {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeVideos:
		ids := make([]ent.Value, 0, len(m.removedvideos))
		for id := range m.removedvideos {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeModerators:
		ids := make([]ent.Value, 0, len(m.removedmoderators))
		for id := range m.removedmoderators {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeStreamers:
		ids := make([]ent.Value, 0, len(m.removedstreamers))
		for id := range m.removedstreamers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GroupMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedadmins {
		edges = append(edges, group.EdgeAdmins)
	}
	if m.clearedmembers {
		edges = append(edges, group.EdgeMembers)
	}
	if m.clearedvideos {
		edges = append(edges, group.EdgeVideos)
	}
	if m.clearedmoderators {
		edges = append(edges, group.EdgeModerators)
	}
	if m.clearedstreamers {
		edges = append(edges, group.EdgeStreamers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GroupMutation) EdgeCleared(name string) bool {
	switch name {
	case group.EdgeAdmins:
		return m.clearedadmins
	case group.EdgeMembers:
		return m.clearedmembers
	case group.EdgeVideos:
		return m.clearedvideos
	case group.EdgeModerators:
		return m.clearedmoderators
	case group.EdgeStreamers:
		return m.clearedstreamers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GroupMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Group unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GroupMutation) ResetEdge(name string) error {
	switch name {
	case group.EdgeAdmins:
		m.ResetAdmins()
		return nil
	case group.EdgeMembers:
		m.ResetMembers()
		return nil
	case group.EdgeVideos:
		m.ResetVideos()
		return nil
	case group.EdgeModerators:
		m.ResetModerators()
		return nil
	case group.EdgeStreamers:
		m.ResetStreamers()
		return nil
	}
	return fmt.Errorf("unknown Group edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                       Op
	typ                      string
	id                       *int
	name                     *string
	password                 *string
	clearedFields            map[string]struct{}
	joined_groups            map[int]struct{}
	removedjoined_groups     map[int]struct{}
	clearedjoined_groups     bool
	moderating_groups        map[int]struct{}
	removedmoderating_groups map[int]struct{}
	clearedmoderating_groups bool
	streaming_groups         map[int]struct{}
	removedstreaming_groups  map[int]struct{}
	clearedstreaming_groups  bool
	admin_groups             map[int]struct{}
	removedadmin_groups      map[int]struct{}
	clearedadmin_groups      bool
	stream_videos            map[int]struct{}
	removedstream_videos     map[int]struct{}
	clearedstream_videos     bool
	liked_videos             map[int]struct{}
	removedliked_videos      map[int]struct{}
	clearedliked_videos      bool
	viewed_videos            map[int]struct{}
	removedviewed_videos     map[int]struct{}
	clearedviewed_videos     bool
	moderated_videos         map[int]struct{}
	removedmoderated_videos  map[int]struct{}
	clearedmoderated_videos  bool
	done                     bool
	oldValue                 func(context.Context) (*User, error)
	predicates               []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// AddJoinedGroupIDs adds the "joined_groups" edge to the Group entity by ids.
func (m *UserMutation) AddJoinedGroupIDs(ids ...int) {
	if m.joined_groups == nil {
		m.joined_groups = make(map[int]struct{})
	}
	for i := range ids {
		m.joined_groups[ids[i]] = struct{}{}
	}
}

// ClearJoinedGroups clears the "joined_groups" edge to the Group entity.
func (m *UserMutation) ClearJoinedGroups() {
	m.clearedjoined_groups = true
}

// JoinedGroupsCleared reports if the "joined_groups" edge to the Group entity was cleared.
func (m *UserMutation) JoinedGroupsCleared() bool {
	return m.clearedjoined_groups
}

// RemoveJoinedGroupIDs removes the "joined_groups" edge to the Group entity by IDs.
func (m *UserMutation) RemoveJoinedGroupIDs(ids ...int) {
	if m.removedjoined_groups == nil {
		m.removedjoined_groups = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.joined_groups, ids[i])
		m.removedjoined_groups[ids[i]] = struct{}{}
	}
}

// RemovedJoinedGroups returns the removed IDs of the "joined_groups" edge to the Group entity.
func (m *UserMutation) RemovedJoinedGroupsIDs() (ids []int) {
	for id := range m.removedjoined_groups {
		ids = append(ids, id)
	}
	return
}

// JoinedGroupsIDs returns the "joined_groups" edge IDs in the mutation.
func (m *UserMutation) JoinedGroupsIDs() (ids []int) {
	for id := range m.joined_groups {
		ids = append(ids, id)
	}
	return
}

// ResetJoinedGroups resets all changes to the "joined_groups" edge.
func (m *UserMutation) ResetJoinedGroups() {
	m.joined_groups = nil
	m.clearedjoined_groups = false
	m.removedjoined_groups = nil
}

// AddModeratingGroupIDs adds the "moderating_groups" edge to the Group entity by ids.
func (m *UserMutation) AddModeratingGroupIDs(ids ...int) {
	if m.moderating_groups == nil {
		m.moderating_groups = make(map[int]struct{})
	}
	for i := range ids {
		m.moderating_groups[ids[i]] = struct{}{}
	}
}

// ClearModeratingGroups clears the "moderating_groups" edge to the Group entity.
func (m *UserMutation) ClearModeratingGroups() {
	m.clearedmoderating_groups = true
}

// ModeratingGroupsCleared reports if the "moderating_groups" edge to the Group entity was cleared.
func (m *UserMutation) ModeratingGroupsCleared() bool {
	return m.clearedmoderating_groups
}

// RemoveModeratingGroupIDs removes the "moderating_groups" edge to the Group entity by IDs.
func (m *UserMutation) RemoveModeratingGroupIDs(ids ...int) {
	if m.removedmoderating_groups == nil {
		m.removedmoderating_groups = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.moderating_groups, ids[i])
		m.removedmoderating_groups[ids[i]] = struct{}{}
	}
}

// RemovedModeratingGroups returns the removed IDs of the "moderating_groups" edge to the Group entity.
func (m *UserMutation) RemovedModeratingGroupsIDs() (ids []int) {
	for id := range m.removedmoderating_groups {
		ids = append(ids, id)
	}
	return
}

// ModeratingGroupsIDs returns the "moderating_groups" edge IDs in the mutation.
func (m *UserMutation) ModeratingGroupsIDs() (ids []int) {
	for id := range m.moderating_groups {
		ids = append(ids, id)
	}
	return
}

// ResetModeratingGroups resets all changes to the "moderating_groups" edge.
func (m *UserMutation) ResetModeratingGroups() {
	m.moderating_groups = nil
	m.clearedmoderating_groups = false
	m.removedmoderating_groups = nil
}

// AddStreamingGroupIDs adds the "streaming_groups" edge to the Group entity by ids.
func (m *UserMutation) AddStreamingGroupIDs(ids ...int) {
	if m.streaming_groups == nil {
		m.streaming_groups = make(map[int]struct{})
	}
	for i := range ids {
		m.streaming_groups[ids[i]] = struct{}{}
	}
}

// ClearStreamingGroups clears the "streaming_groups" edge to the Group entity.
func (m *UserMutation) ClearStreamingGroups() {
	m.clearedstreaming_groups = true
}

// StreamingGroupsCleared reports if the "streaming_groups" edge to the Group entity was cleared.
func (m *UserMutation) StreamingGroupsCleared() bool {
	return m.clearedstreaming_groups
}

// RemoveStreamingGroupIDs removes the "streaming_groups" edge to the Group entity by IDs.
func (m *UserMutation) RemoveStreamingGroupIDs(ids ...int) {
	if m.removedstreaming_groups == nil {
		m.removedstreaming_groups = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.streaming_groups, ids[i])
		m.removedstreaming_groups[ids[i]] = struct{}{}
	}
}

// RemovedStreamingGroups returns the removed IDs of the "streaming_groups" edge to the Group entity.
func (m *UserMutation) RemovedStreamingGroupsIDs() (ids []int) {
	for id := range m.removedstreaming_groups {
		ids = append(ids, id)
	}
	return
}

// StreamingGroupsIDs returns the "streaming_groups" edge IDs in the mutation.
func (m *UserMutation) StreamingGroupsIDs() (ids []int) {
	for id := range m.streaming_groups {
		ids = append(ids, id)
	}
	return
}

// ResetStreamingGroups resets all changes to the "streaming_groups" edge.
func (m *UserMutation) ResetStreamingGroups() {
	m.streaming_groups = nil
	m.clearedstreaming_groups = false
	m.removedstreaming_groups = nil
}

// AddAdminGroupIDs adds the "admin_groups" edge to the Group entity by ids.
func (m *UserMutation) AddAdminGroupIDs(ids ...int) {
	if m.admin_groups == nil {
		m.admin_groups = make(map[int]struct{})
	}
	for i := range ids {
		m.admin_groups[ids[i]] = struct{}{}
	}
}

// ClearAdminGroups clears the "admin_groups" edge to the Group entity.
func (m *UserMutation) ClearAdminGroups() {
	m.clearedadmin_groups = true
}

// AdminGroupsCleared reports if the "admin_groups" edge to the Group entity was cleared.
func (m *UserMutation) AdminGroupsCleared() bool {
	return m.clearedadmin_groups
}

// RemoveAdminGroupIDs removes the "admin_groups" edge to the Group entity by IDs.
func (m *UserMutation) RemoveAdminGroupIDs(ids ...int) {
	if m.removedadmin_groups == nil {
		m.removedadmin_groups = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.admin_groups, ids[i])
		m.removedadmin_groups[ids[i]] = struct{}{}
	}
}

// RemovedAdminGroups returns the removed IDs of the "admin_groups" edge to the Group entity.
func (m *UserMutation) RemovedAdminGroupsIDs() (ids []int) {
	for id := range m.removedadmin_groups {
		ids = append(ids, id)
	}
	return
}

// AdminGroupsIDs returns the "admin_groups" edge IDs in the mutation.
func (m *UserMutation) AdminGroupsIDs() (ids []int) {
	for id := range m.admin_groups {
		ids = append(ids, id)
	}
	return
}

// ResetAdminGroups resets all changes to the "admin_groups" edge.
func (m *UserMutation) ResetAdminGroups() {
	m.admin_groups = nil
	m.clearedadmin_groups = false
	m.removedadmin_groups = nil
}

// AddStreamVideoIDs adds the "stream_videos" edge to the Video entity by ids.
func (m *UserMutation) AddStreamVideoIDs(ids ...int) {
	if m.stream_videos == nil {
		m.stream_videos = make(map[int]struct{})
	}
	for i := range ids {
		m.stream_videos[ids[i]] = struct{}{}
	}
}

// ClearStreamVideos clears the "stream_videos" edge to the Video entity.
func (m *UserMutation) ClearStreamVideos() {
	m.clearedstream_videos = true
}

// StreamVideosCleared reports if the "stream_videos" edge to the Video entity was cleared.
func (m *UserMutation) StreamVideosCleared() bool {
	return m.clearedstream_videos
}

// RemoveStreamVideoIDs removes the "stream_videos" edge to the Video entity by IDs.
func (m *UserMutation) RemoveStreamVideoIDs(ids ...int) {
	if m.removedstream_videos == nil {
		m.removedstream_videos = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.stream_videos, ids[i])
		m.removedstream_videos[ids[i]] = struct{}{}
	}
}

// RemovedStreamVideos returns the removed IDs of the "stream_videos" edge to the Video entity.
func (m *UserMutation) RemovedStreamVideosIDs() (ids []int) {
	for id := range m.removedstream_videos {
		ids = append(ids, id)
	}
	return
}

// StreamVideosIDs returns the "stream_videos" edge IDs in the mutation.
func (m *UserMutation) StreamVideosIDs() (ids []int) {
	for id := range m.stream_videos {
		ids = append(ids, id)
	}
	return
}

// ResetStreamVideos resets all changes to the "stream_videos" edge.
func (m *UserMutation) ResetStreamVideos() {
	m.stream_videos = nil
	m.clearedstream_videos = false
	m.removedstream_videos = nil
}

// AddLikedVideoIDs adds the "liked_videos" edge to the Video entity by ids.
func (m *UserMutation) AddLikedVideoIDs(ids ...int) {
	if m.liked_videos == nil {
		m.liked_videos = make(map[int]struct{})
	}
	for i := range ids {
		m.liked_videos[ids[i]] = struct{}{}
	}
}

// ClearLikedVideos clears the "liked_videos" edge to the Video entity.
func (m *UserMutation) ClearLikedVideos() {
	m.clearedliked_videos = true
}

// LikedVideosCleared reports if the "liked_videos" edge to the Video entity was cleared.
func (m *UserMutation) LikedVideosCleared() bool {
	return m.clearedliked_videos
}

// RemoveLikedVideoIDs removes the "liked_videos" edge to the Video entity by IDs.
func (m *UserMutation) RemoveLikedVideoIDs(ids ...int) {
	if m.removedliked_videos == nil {
		m.removedliked_videos = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.liked_videos, ids[i])
		m.removedliked_videos[ids[i]] = struct{}{}
	}
}

// RemovedLikedVideos returns the removed IDs of the "liked_videos" edge to the Video entity.
func (m *UserMutation) RemovedLikedVideosIDs() (ids []int) {
	for id := range m.removedliked_videos {
		ids = append(ids, id)
	}
	return
}

// LikedVideosIDs returns the "liked_videos" edge IDs in the mutation.
func (m *UserMutation) LikedVideosIDs() (ids []int) {
	for id := range m.liked_videos {
		ids = append(ids, id)
	}
	return
}

// ResetLikedVideos resets all changes to the "liked_videos" edge.
func (m *UserMutation) ResetLikedVideos() {
	m.liked_videos = nil
	m.clearedliked_videos = false
	m.removedliked_videos = nil
}

// AddViewedVideoIDs adds the "viewed_videos" edge to the Video entity by ids.
func (m *UserMutation) AddViewedVideoIDs(ids ...int) {
	if m.viewed_videos == nil {
		m.viewed_videos = make(map[int]struct{})
	}
	for i := range ids {
		m.viewed_videos[ids[i]] = struct{}{}
	}
}

// ClearViewedVideos clears the "viewed_videos" edge to the Video entity.
func (m *UserMutation) ClearViewedVideos() {
	m.clearedviewed_videos = true
}

// ViewedVideosCleared reports if the "viewed_videos" edge to the Video entity was cleared.
func (m *UserMutation) ViewedVideosCleared() bool {
	return m.clearedviewed_videos
}

// RemoveViewedVideoIDs removes the "viewed_videos" edge to the Video entity by IDs.
func (m *UserMutation) RemoveViewedVideoIDs(ids ...int) {
	if m.removedviewed_videos == nil {
		m.removedviewed_videos = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.viewed_videos, ids[i])
		m.removedviewed_videos[ids[i]] = struct{}{}
	}
}

// RemovedViewedVideos returns the removed IDs of the "viewed_videos" edge to the Video entity.
func (m *UserMutation) RemovedViewedVideosIDs() (ids []int) {
	for id := range m.removedviewed_videos {
		ids = append(ids, id)
	}
	return
}

// ViewedVideosIDs returns the "viewed_videos" edge IDs in the mutation.
func (m *UserMutation) ViewedVideosIDs() (ids []int) {
	for id := range m.viewed_videos {
		ids = append(ids, id)
	}
	return
}

// ResetViewedVideos resets all changes to the "viewed_videos" edge.
func (m *UserMutation) ResetViewedVideos() {
	m.viewed_videos = nil
	m.clearedviewed_videos = false
	m.removedviewed_videos = nil
}

// AddModeratedVideoIDs adds the "moderated_videos" edge to the Video entity by ids.
func (m *UserMutation) AddModeratedVideoIDs(ids ...int) {
	if m.moderated_videos == nil {
		m.moderated_videos = make(map[int]struct{})
	}
	for i := range ids {
		m.moderated_videos[ids[i]] = struct{}{}
	}
}

// ClearModeratedVideos clears the "moderated_videos" edge to the Video entity.
func (m *UserMutation) ClearModeratedVideos() {
	m.clearedmoderated_videos = true
}

// ModeratedVideosCleared reports if the "moderated_videos" edge to the Video entity was cleared.
func (m *UserMutation) ModeratedVideosCleared() bool {
	return m.clearedmoderated_videos
}

// RemoveModeratedVideoIDs removes the "moderated_videos" edge to the Video entity by IDs.
func (m *UserMutation) RemoveModeratedVideoIDs(ids ...int) {
	if m.removedmoderated_videos == nil {
		m.removedmoderated_videos = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.moderated_videos, ids[i])
		m.removedmoderated_videos[ids[i]] = struct{}{}
	}
}

// RemovedModeratedVideos returns the removed IDs of the "moderated_videos" edge to the Video entity.
func (m *UserMutation) RemovedModeratedVideosIDs() (ids []int) {
	for id := range m.removedmoderated_videos {
		ids = append(ids, id)
	}
	return
}

// ModeratedVideosIDs returns the "moderated_videos" edge IDs in the mutation.
func (m *UserMutation) ModeratedVideosIDs() (ids []int) {
	for id := range m.moderated_videos {
		ids = append(ids, id)
	}
	return
}

// ResetModeratedVideos resets all changes to the "moderated_videos" edge.
func (m *UserMutation) ResetModeratedVideos() {
	m.moderated_videos = nil
	m.clearedmoderated_videos = false
	m.removedmoderated_videos = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 8)
	if m.joined_groups != nil {
		edges = append(edges, user.EdgeJoinedGroups)
	}
	if m.moderating_groups != nil {
		edges = append(edges, user.EdgeModeratingGroups)
	}
	if m.streaming_groups != nil {
		edges = append(edges, user.EdgeStreamingGroups)
	}
	if m.admin_groups != nil {
		edges = append(edges, user.EdgeAdminGroups)
	}
	if m.stream_videos != nil {
		edges = append(edges, user.EdgeStreamVideos)
	}
	if m.liked_videos != nil {
		edges = append(edges, user.EdgeLikedVideos)
	}
	if m.viewed_videos != nil {
		edges = append(edges, user.EdgeViewedVideos)
	}
	if m.moderated_videos != nil {
		edges = append(edges, user.EdgeModeratedVideos)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeJoinedGroups:
		ids := make([]ent.Value, 0, len(m.joined_groups))
		for id := range m.joined_groups {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeModeratingGroups:
		ids := make([]ent.Value, 0, len(m.moderating_groups))
		for id := range m.moderating_groups {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeStreamingGroups:
		ids := make([]ent.Value, 0, len(m.streaming_groups))
		for id := range m.streaming_groups {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeAdminGroups:
		ids := make([]ent.Value, 0, len(m.admin_groups))
		for id := range m.admin_groups {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeStreamVideos:
		ids := make([]ent.Value, 0, len(m.stream_videos))
		for id := range m.stream_videos {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeLikedVideos:
		ids := make([]ent.Value, 0, len(m.liked_videos))
		for id := range m.liked_videos {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeViewedVideos:
		ids := make([]ent.Value, 0, len(m.viewed_videos))
		for id := range m.viewed_videos {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeModeratedVideos:
		ids := make([]ent.Value, 0, len(m.moderated_videos))
		for id := range m.moderated_videos {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 8)
	if m.removedjoined_groups != nil {
		edges = append(edges, user.EdgeJoinedGroups)
	}
	if m.removedmoderating_groups != nil {
		edges = append(edges, user.EdgeModeratingGroups)
	}
	if m.removedstreaming_groups != nil {
		edges = append(edges, user.EdgeStreamingGroups)
	}
	if m.removedadmin_groups != nil {
		edges = append(edges, user.EdgeAdminGroups)
	}
	if m.removedstream_videos != nil {
		edges = append(edges, user.EdgeStreamVideos)
	}
	if m.removedliked_videos != nil {
		edges = append(edges, user.EdgeLikedVideos)
	}
	if m.removedviewed_videos != nil {
		edges = append(edges, user.EdgeViewedVideos)
	}
	if m.removedmoderated_videos != nil {
		edges = append(edges, user.EdgeModeratedVideos)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeJoinedGroups:
		ids := make([]ent.Value, 0, len(m.removedjoined_groups))
		for id := range m.removedjoined_groups {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeModeratingGroups:
		ids := make([]ent.Value, 0, len(m.removedmoderating_groups))
		for id := range m.removedmoderating_groups {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeStreamingGroups:
		ids := make([]ent.Value, 0, len(m.removedstreaming_groups))
		for id := range m.removedstreaming_groups {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeAdminGroups:
		ids := make([]ent.Value, 0, len(m.removedadmin_groups))
		for id := range m.removedadmin_groups {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeStreamVideos:
		ids := make([]ent.Value, 0, len(m.removedstream_videos))
		for id := range m.removedstream_videos {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeLikedVideos:
		ids := make([]ent.Value, 0, len(m.removedliked_videos))
		for id := range m.removedliked_videos {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeViewedVideos:
		ids := make([]ent.Value, 0, len(m.removedviewed_videos))
		for id := range m.removedviewed_videos {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeModeratedVideos:
		ids := make([]ent.Value, 0, len(m.removedmoderated_videos))
		for id := range m.removedmoderated_videos {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 8)
	if m.clearedjoined_groups {
		edges = append(edges, user.EdgeJoinedGroups)
	}
	if m.clearedmoderating_groups {
		edges = append(edges, user.EdgeModeratingGroups)
	}
	if m.clearedstreaming_groups {
		edges = append(edges, user.EdgeStreamingGroups)
	}
	if m.clearedadmin_groups {
		edges = append(edges, user.EdgeAdminGroups)
	}
	if m.clearedstream_videos {
		edges = append(edges, user.EdgeStreamVideos)
	}
	if m.clearedliked_videos {
		edges = append(edges, user.EdgeLikedVideos)
	}
	if m.clearedviewed_videos {
		edges = append(edges, user.EdgeViewedVideos)
	}
	if m.clearedmoderated_videos {
		edges = append(edges, user.EdgeModeratedVideos)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeJoinedGroups:
		return m.clearedjoined_groups
	case user.EdgeModeratingGroups:
		return m.clearedmoderating_groups
	case user.EdgeStreamingGroups:
		return m.clearedstreaming_groups
	case user.EdgeAdminGroups:
		return m.clearedadmin_groups
	case user.EdgeStreamVideos:
		return m.clearedstream_videos
	case user.EdgeLikedVideos:
		return m.clearedliked_videos
	case user.EdgeViewedVideos:
		return m.clearedviewed_videos
	case user.EdgeModeratedVideos:
		return m.clearedmoderated_videos
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeJoinedGroups:
		m.ResetJoinedGroups()
		return nil
	case user.EdgeModeratingGroups:
		m.ResetModeratingGroups()
		return nil
	case user.EdgeStreamingGroups:
		m.ResetStreamingGroups()
		return nil
	case user.EdgeAdminGroups:
		m.ResetAdminGroups()
		return nil
	case user.EdgeStreamVideos:
		m.ResetStreamVideos()
		return nil
	case user.EdgeLikedVideos:
		m.ResetLikedVideos()
		return nil
	case user.EdgeViewedVideos:
		m.ResetViewedVideos()
		return nil
	case user.EdgeModeratedVideos:
		m.ResetModeratedVideos()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// VideoMutation represents an operation that mutates the Video nodes in the graph.
type VideoMutation struct {
	config
	op                Op
	typ               string
	id                *int
	title             *string
	videotype         *video.Videotype
	clearedFields     map[string]struct{}
	group             *int
	clearedgroup      bool
	streamers         map[int]struct{}
	removedstreamers  map[int]struct{}
	clearedstreamers  bool
	moderaters        map[int]struct{}
	removedmoderaters map[int]struct{}
	clearedmoderaters bool
	likes             map[int]struct{}
	removedlikes      map[int]struct{}
	clearedlikes      bool
	viewers           map[int]struct{}
	removedviewers    map[int]struct{}
	clearedviewers    bool
	done              bool
	oldValue          func(context.Context) (*Video, error)
	predicates        []predicate.Video
}

var _ ent.Mutation = (*VideoMutation)(nil)

// videoOption allows management of the mutation configuration using functional options.
type videoOption func(*VideoMutation)

// newVideoMutation creates new mutation for the Video entity.
func newVideoMutation(c config, op Op, opts ...videoOption) *VideoMutation {
	m := &VideoMutation{
		config:        c,
		op:            op,
		typ:           TypeVideo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVideoID sets the ID field of the mutation.
func withVideoID(id int) videoOption {
	return func(m *VideoMutation) {
		var (
			err   error
			once  sync.Once
			value *Video
		)
		m.oldValue = func(ctx context.Context) (*Video, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Video.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVideo sets the old Video of the mutation.
func withVideo(node *Video) videoOption {
	return func(m *VideoMutation) {
		m.oldValue = func(context.Context) (*Video, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VideoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VideoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VideoMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VideoMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Video.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *VideoMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *VideoMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Video entity.
// If the Video object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *VideoMutation) ResetTitle() {
	m.title = nil
}

// SetVideotype sets the "videotype" field.
func (m *VideoMutation) SetVideotype(v video.Videotype) {
	m.videotype = &v
}

// Videotype returns the value of the "videotype" field in the mutation.
func (m *VideoMutation) Videotype() (r video.Videotype, exists bool) {
	v := m.videotype
	if v == nil {
		return
	}
	return *v, true
}

// OldVideotype returns the old "videotype" field's value of the Video entity.
// If the Video object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VideoMutation) OldVideotype(ctx context.Context) (v video.Videotype, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVideotype is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVideotype requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVideotype: %w", err)
	}
	return oldValue.Videotype, nil
}

// ResetVideotype resets all changes to the "videotype" field.
func (m *VideoMutation) ResetVideotype() {
	m.videotype = nil
}

// SetGroupID sets the "group" edge to the Group entity by id.
func (m *VideoMutation) SetGroupID(id int) {
	m.group = &id
}

// ClearGroup clears the "group" edge to the Group entity.
func (m *VideoMutation) ClearGroup() {
	m.clearedgroup = true
}

// GroupCleared reports if the "group" edge to the Group entity was cleared.
func (m *VideoMutation) GroupCleared() bool {
	return m.clearedgroup
}

// GroupID returns the "group" edge ID in the mutation.
func (m *VideoMutation) GroupID() (id int, exists bool) {
	if m.group != nil {
		return *m.group, true
	}
	return
}

// GroupIDs returns the "group" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GroupID instead. It exists only for internal usage by the builders.
func (m *VideoMutation) GroupIDs() (ids []int) {
	if id := m.group; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGroup resets all changes to the "group" edge.
func (m *VideoMutation) ResetGroup() {
	m.group = nil
	m.clearedgroup = false
}

// AddStreamerIDs adds the "streamers" edge to the User entity by ids.
func (m *VideoMutation) AddStreamerIDs(ids ...int) {
	if m.streamers == nil {
		m.streamers = make(map[int]struct{})
	}
	for i := range ids {
		m.streamers[ids[i]] = struct{}{}
	}
}

// ClearStreamers clears the "streamers" edge to the User entity.
func (m *VideoMutation) ClearStreamers() {
	m.clearedstreamers = true
}

// StreamersCleared reports if the "streamers" edge to the User entity was cleared.
func (m *VideoMutation) StreamersCleared() bool {
	return m.clearedstreamers
}

// RemoveStreamerIDs removes the "streamers" edge to the User entity by IDs.
func (m *VideoMutation) RemoveStreamerIDs(ids ...int) {
	if m.removedstreamers == nil {
		m.removedstreamers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.streamers, ids[i])
		m.removedstreamers[ids[i]] = struct{}{}
	}
}

// RemovedStreamers returns the removed IDs of the "streamers" edge to the User entity.
func (m *VideoMutation) RemovedStreamersIDs() (ids []int) {
	for id := range m.removedstreamers {
		ids = append(ids, id)
	}
	return
}

// StreamersIDs returns the "streamers" edge IDs in the mutation.
func (m *VideoMutation) StreamersIDs() (ids []int) {
	for id := range m.streamers {
		ids = append(ids, id)
	}
	return
}

// ResetStreamers resets all changes to the "streamers" edge.
func (m *VideoMutation) ResetStreamers() {
	m.streamers = nil
	m.clearedstreamers = false
	m.removedstreamers = nil
}

// AddModeraterIDs adds the "moderaters" edge to the User entity by ids.
func (m *VideoMutation) AddModeraterIDs(ids ...int) {
	if m.moderaters == nil {
		m.moderaters = make(map[int]struct{})
	}
	for i := range ids {
		m.moderaters[ids[i]] = struct{}{}
	}
}

// ClearModeraters clears the "moderaters" edge to the User entity.
func (m *VideoMutation) ClearModeraters() {
	m.clearedmoderaters = true
}

// ModeratersCleared reports if the "moderaters" edge to the User entity was cleared.
func (m *VideoMutation) ModeratersCleared() bool {
	return m.clearedmoderaters
}

// RemoveModeraterIDs removes the "moderaters" edge to the User entity by IDs.
func (m *VideoMutation) RemoveModeraterIDs(ids ...int) {
	if m.removedmoderaters == nil {
		m.removedmoderaters = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.moderaters, ids[i])
		m.removedmoderaters[ids[i]] = struct{}{}
	}
}

// RemovedModeraters returns the removed IDs of the "moderaters" edge to the User entity.
func (m *VideoMutation) RemovedModeratersIDs() (ids []int) {
	for id := range m.removedmoderaters {
		ids = append(ids, id)
	}
	return
}

// ModeratersIDs returns the "moderaters" edge IDs in the mutation.
func (m *VideoMutation) ModeratersIDs() (ids []int) {
	for id := range m.moderaters {
		ids = append(ids, id)
	}
	return
}

// ResetModeraters resets all changes to the "moderaters" edge.
func (m *VideoMutation) ResetModeraters() {
	m.moderaters = nil
	m.clearedmoderaters = false
	m.removedmoderaters = nil
}

// AddLikeIDs adds the "likes" edge to the User entity by ids.
func (m *VideoMutation) AddLikeIDs(ids ...int) {
	if m.likes == nil {
		m.likes = make(map[int]struct{})
	}
	for i := range ids {
		m.likes[ids[i]] = struct{}{}
	}
}

// ClearLikes clears the "likes" edge to the User entity.
func (m *VideoMutation) ClearLikes() {
	m.clearedlikes = true
}

// LikesCleared reports if the "likes" edge to the User entity was cleared.
func (m *VideoMutation) LikesCleared() bool {
	return m.clearedlikes
}

// RemoveLikeIDs removes the "likes" edge to the User entity by IDs.
func (m *VideoMutation) RemoveLikeIDs(ids ...int) {
	if m.removedlikes == nil {
		m.removedlikes = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.likes, ids[i])
		m.removedlikes[ids[i]] = struct{}{}
	}
}

// RemovedLikes returns the removed IDs of the "likes" edge to the User entity.
func (m *VideoMutation) RemovedLikesIDs() (ids []int) {
	for id := range m.removedlikes {
		ids = append(ids, id)
	}
	return
}

// LikesIDs returns the "likes" edge IDs in the mutation.
func (m *VideoMutation) LikesIDs() (ids []int) {
	for id := range m.likes {
		ids = append(ids, id)
	}
	return
}

// ResetLikes resets all changes to the "likes" edge.
func (m *VideoMutation) ResetLikes() {
	m.likes = nil
	m.clearedlikes = false
	m.removedlikes = nil
}

// AddViewerIDs adds the "viewers" edge to the User entity by ids.
func (m *VideoMutation) AddViewerIDs(ids ...int) {
	if m.viewers == nil {
		m.viewers = make(map[int]struct{})
	}
	for i := range ids {
		m.viewers[ids[i]] = struct{}{}
	}
}

// ClearViewers clears the "viewers" edge to the User entity.
func (m *VideoMutation) ClearViewers() {
	m.clearedviewers = true
}

// ViewersCleared reports if the "viewers" edge to the User entity was cleared.
func (m *VideoMutation) ViewersCleared() bool {
	return m.clearedviewers
}

// RemoveViewerIDs removes the "viewers" edge to the User entity by IDs.
func (m *VideoMutation) RemoveViewerIDs(ids ...int) {
	if m.removedviewers == nil {
		m.removedviewers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.viewers, ids[i])
		m.removedviewers[ids[i]] = struct{}{}
	}
}

// RemovedViewers returns the removed IDs of the "viewers" edge to the User entity.
func (m *VideoMutation) RemovedViewersIDs() (ids []int) {
	for id := range m.removedviewers {
		ids = append(ids, id)
	}
	return
}

// ViewersIDs returns the "viewers" edge IDs in the mutation.
func (m *VideoMutation) ViewersIDs() (ids []int) {
	for id := range m.viewers {
		ids = append(ids, id)
	}
	return
}

// ResetViewers resets all changes to the "viewers" edge.
func (m *VideoMutation) ResetViewers() {
	m.viewers = nil
	m.clearedviewers = false
	m.removedviewers = nil
}

// Where appends a list predicates to the VideoMutation builder.
func (m *VideoMutation) Where(ps ...predicate.Video) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *VideoMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Video).
func (m *VideoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VideoMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.title != nil {
		fields = append(fields, video.FieldTitle)
	}
	if m.videotype != nil {
		fields = append(fields, video.FieldVideotype)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VideoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case video.FieldTitle:
		return m.Title()
	case video.FieldVideotype:
		return m.Videotype()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VideoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case video.FieldTitle:
		return m.OldTitle(ctx)
	case video.FieldVideotype:
		return m.OldVideotype(ctx)
	}
	return nil, fmt.Errorf("unknown Video field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VideoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case video.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case video.FieldVideotype:
		v, ok := value.(video.Videotype)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVideotype(v)
		return nil
	}
	return fmt.Errorf("unknown Video field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VideoMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VideoMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VideoMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Video numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VideoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VideoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VideoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Video nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VideoMutation) ResetField(name string) error {
	switch name {
	case video.FieldTitle:
		m.ResetTitle()
		return nil
	case video.FieldVideotype:
		m.ResetVideotype()
		return nil
	}
	return fmt.Errorf("unknown Video field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VideoMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.group != nil {
		edges = append(edges, video.EdgeGroup)
	}
	if m.streamers != nil {
		edges = append(edges, video.EdgeStreamers)
	}
	if m.moderaters != nil {
		edges = append(edges, video.EdgeModeraters)
	}
	if m.likes != nil {
		edges = append(edges, video.EdgeLikes)
	}
	if m.viewers != nil {
		edges = append(edges, video.EdgeViewers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VideoMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case video.EdgeGroup:
		if id := m.group; id != nil {
			return []ent.Value{*id}
		}
	case video.EdgeStreamers:
		ids := make([]ent.Value, 0, len(m.streamers))
		for id := range m.streamers {
			ids = append(ids, id)
		}
		return ids
	case video.EdgeModeraters:
		ids := make([]ent.Value, 0, len(m.moderaters))
		for id := range m.moderaters {
			ids = append(ids, id)
		}
		return ids
	case video.EdgeLikes:
		ids := make([]ent.Value, 0, len(m.likes))
		for id := range m.likes {
			ids = append(ids, id)
		}
		return ids
	case video.EdgeViewers:
		ids := make([]ent.Value, 0, len(m.viewers))
		for id := range m.viewers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VideoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedstreamers != nil {
		edges = append(edges, video.EdgeStreamers)
	}
	if m.removedmoderaters != nil {
		edges = append(edges, video.EdgeModeraters)
	}
	if m.removedlikes != nil {
		edges = append(edges, video.EdgeLikes)
	}
	if m.removedviewers != nil {
		edges = append(edges, video.EdgeViewers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VideoMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case video.EdgeStreamers:
		ids := make([]ent.Value, 0, len(m.removedstreamers))
		for id := range m.removedstreamers {
			ids = append(ids, id)
		}
		return ids
	case video.EdgeModeraters:
		ids := make([]ent.Value, 0, len(m.removedmoderaters))
		for id := range m.removedmoderaters {
			ids = append(ids, id)
		}
		return ids
	case video.EdgeLikes:
		ids := make([]ent.Value, 0, len(m.removedlikes))
		for id := range m.removedlikes {
			ids = append(ids, id)
		}
		return ids
	case video.EdgeViewers:
		ids := make([]ent.Value, 0, len(m.removedviewers))
		for id := range m.removedviewers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VideoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedgroup {
		edges = append(edges, video.EdgeGroup)
	}
	if m.clearedstreamers {
		edges = append(edges, video.EdgeStreamers)
	}
	if m.clearedmoderaters {
		edges = append(edges, video.EdgeModeraters)
	}
	if m.clearedlikes {
		edges = append(edges, video.EdgeLikes)
	}
	if m.clearedviewers {
		edges = append(edges, video.EdgeViewers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VideoMutation) EdgeCleared(name string) bool {
	switch name {
	case video.EdgeGroup:
		return m.clearedgroup
	case video.EdgeStreamers:
		return m.clearedstreamers
	case video.EdgeModeraters:
		return m.clearedmoderaters
	case video.EdgeLikes:
		return m.clearedlikes
	case video.EdgeViewers:
		return m.clearedviewers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VideoMutation) ClearEdge(name string) error {
	switch name {
	case video.EdgeGroup:
		m.ClearGroup()
		return nil
	}
	return fmt.Errorf("unknown Video unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VideoMutation) ResetEdge(name string) error {
	switch name {
	case video.EdgeGroup:
		m.ResetGroup()
		return nil
	case video.EdgeStreamers:
		m.ResetStreamers()
		return nil
	case video.EdgeModeraters:
		m.ResetModeraters()
		return nil
	case video.EdgeLikes:
		m.ResetLikes()
		return nil
	case video.EdgeViewers:
		m.ResetViewers()
		return nil
	}
	return fmt.Errorf("unknown Video edge %s", name)
}
