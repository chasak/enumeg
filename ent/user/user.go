// Code generated by entc, DO NOT EDIT.

package user

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// EdgeJoinedGroups holds the string denoting the joined_groups edge name in mutations.
	EdgeJoinedGroups = "joined_groups"
	// EdgeModeratingGroups holds the string denoting the moderating_groups edge name in mutations.
	EdgeModeratingGroups = "moderating_groups"
	// EdgeStreamingGroups holds the string denoting the streaming_groups edge name in mutations.
	EdgeStreamingGroups = "streaming_groups"
	// EdgeAdminGroups holds the string denoting the admin_groups edge name in mutations.
	EdgeAdminGroups = "admin_groups"
	// EdgeStreamVideos holds the string denoting the stream_videos edge name in mutations.
	EdgeStreamVideos = "stream_videos"
	// EdgeLikedVideos holds the string denoting the liked_videos edge name in mutations.
	EdgeLikedVideos = "liked_videos"
	// EdgeViewedVideos holds the string denoting the viewed_videos edge name in mutations.
	EdgeViewedVideos = "viewed_videos"
	// EdgeModeratedVideos holds the string denoting the moderated_videos edge name in mutations.
	EdgeModeratedVideos = "moderated_videos"
	// Table holds the table name of the user in the database.
	Table = "users"
	// JoinedGroupsTable is the table that holds the joined_groups relation/edge. The primary key declared below.
	JoinedGroupsTable = "group_members"
	// JoinedGroupsInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	JoinedGroupsInverseTable = "groups"
	// ModeratingGroupsTable is the table that holds the moderating_groups relation/edge. The primary key declared below.
	ModeratingGroupsTable = "group_moderators"
	// ModeratingGroupsInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	ModeratingGroupsInverseTable = "groups"
	// StreamingGroupsTable is the table that holds the streaming_groups relation/edge. The primary key declared below.
	StreamingGroupsTable = "group_streamers"
	// StreamingGroupsInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	StreamingGroupsInverseTable = "groups"
	// AdminGroupsTable is the table that holds the admin_groups relation/edge. The primary key declared below.
	AdminGroupsTable = "group_admins"
	// AdminGroupsInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	AdminGroupsInverseTable = "groups"
	// StreamVideosTable is the table that holds the stream_videos relation/edge. The primary key declared below.
	StreamVideosTable = "user_stream_videos"
	// StreamVideosInverseTable is the table name for the Video entity.
	// It exists in this package in order to avoid circular dependency with the "video" package.
	StreamVideosInverseTable = "videos"
	// LikedVideosTable is the table that holds the liked_videos relation/edge. The primary key declared below.
	LikedVideosTable = "user_liked_videos"
	// LikedVideosInverseTable is the table name for the Video entity.
	// It exists in this package in order to avoid circular dependency with the "video" package.
	LikedVideosInverseTable = "videos"
	// ViewedVideosTable is the table that holds the viewed_videos relation/edge. The primary key declared below.
	ViewedVideosTable = "user_viewed_videos"
	// ViewedVideosInverseTable is the table name for the Video entity.
	// It exists in this package in order to avoid circular dependency with the "video" package.
	ViewedVideosInverseTable = "videos"
	// ModeratedVideosTable is the table that holds the moderated_videos relation/edge. The primary key declared below.
	ModeratedVideosTable = "user_moderated_videos"
	// ModeratedVideosInverseTable is the table name for the Video entity.
	// It exists in this package in order to avoid circular dependency with the "video" package.
	ModeratedVideosInverseTable = "videos"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldUUID,
	FieldPassword,
}

var (
	// JoinedGroupsPrimaryKey and JoinedGroupsColumn2 are the table columns denoting the
	// primary key for the joined_groups relation (M2M).
	JoinedGroupsPrimaryKey = []string{"group_id", "user_id"}
	// ModeratingGroupsPrimaryKey and ModeratingGroupsColumn2 are the table columns denoting the
	// primary key for the moderating_groups relation (M2M).
	ModeratingGroupsPrimaryKey = []string{"group_id", "user_id"}
	// StreamingGroupsPrimaryKey and StreamingGroupsColumn2 are the table columns denoting the
	// primary key for the streaming_groups relation (M2M).
	StreamingGroupsPrimaryKey = []string{"group_id", "user_id"}
	// AdminGroupsPrimaryKey and AdminGroupsColumn2 are the table columns denoting the
	// primary key for the admin_groups relation (M2M).
	AdminGroupsPrimaryKey = []string{"group_id", "user_id"}
	// StreamVideosPrimaryKey and StreamVideosColumn2 are the table columns denoting the
	// primary key for the stream_videos relation (M2M).
	StreamVideosPrimaryKey = []string{"user_id", "video_id"}
	// LikedVideosPrimaryKey and LikedVideosColumn2 are the table columns denoting the
	// primary key for the liked_videos relation (M2M).
	LikedVideosPrimaryKey = []string{"user_id", "video_id"}
	// ViewedVideosPrimaryKey and ViewedVideosColumn2 are the table columns denoting the
	// primary key for the viewed_videos relation (M2M).
	ViewedVideosPrimaryKey = []string{"user_id", "video_id"}
	// ModeratedVideosPrimaryKey and ModeratedVideosColumn2 are the table columns denoting the
	// primary key for the moderated_videos relation (M2M).
	ModeratedVideosPrimaryKey = []string{"user_id", "video_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUUID holds the default value on creation for the "uuid" field.
	DefaultUUID func() uuid.UUID
)
