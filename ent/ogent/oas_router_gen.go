// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"math/big"
	"math/bits"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = bits.LeadingZeros64
	_ = big.Rat{}
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = attribute.KeyValue{}
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
	_ = jx.Null
	_ = sync.Pool{}
	_ = codes.Unset
)

func (s *Server) notFound(w http.ResponseWriter, r *http.Request) {
	s.cfg.NotFound(w, r)
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	if len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [1]string{}
	// Static code generated router with unwrapped path search.
	switch r.Method {
	case "DELETE":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				s.handleDeleteUserRequest([1]string{
					args[0],
				}, w, r)

				return
			}
			switch elem[0] {
			case 'g': // Prefix: "groups/"
				if l := len("groups/"); len(elem) >= l && elem[0:l] == "groups/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: DeleteGroup
					s.handleDeleteGroupRequest([1]string{
						args[0],
					}, w, r)

					return
				}
			case 'u': // Prefix: "users/"
				if l := len("users/"); len(elem) >= l && elem[0:l] == "users/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: DeleteUser
					s.handleDeleteUserRequest([1]string{
						args[0],
					}, w, r)

					return
				}
			case 'v': // Prefix: "videos/"
				if l := len("videos/"); len(elem) >= l && elem[0:l] == "videos/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: DeleteVideo
					s.handleDeleteVideoRequest([1]string{
						args[0],
					}, w, r)

					return
				}
			}
		}
	case "GET":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				s.handleListUserRequest([0]string{}, w, r)

				return
			}
			switch elem[0] {
			case 'g': // Prefix: "groups"
				if l := len("groups"); len(elem) >= l && elem[0:l] == "groups" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					s.handleListGroupRequest([0]string{}, w, r)

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						s.handleReadGroupRequest([1]string{
							args[0],
						}, w, r)

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleListGroupMembersRequest([1]string{
								args[0],
							}, w, r)

							return
						}
						switch elem[0] {
						case 'a': // Prefix: "admins"
							if l := len("admins"); len(elem) >= l && elem[0:l] == "admins" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf: ListGroupAdmins
								s.handleListGroupAdminsRequest([1]string{
									args[0],
								}, w, r)

								return
							}
						case 'm': // Prefix: "m"
							if l := len("m"); len(elem) >= l && elem[0:l] == "m" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleListGroupModeratorsRequest([1]string{
									args[0],
								}, w, r)

								return
							}
							switch elem[0] {
							case 'e': // Prefix: "embers"
								if l := len("embers"); len(elem) >= l && elem[0:l] == "embers" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: ListGroupMembers
									s.handleListGroupMembersRequest([1]string{
										args[0],
									}, w, r)

									return
								}
							case 'o': // Prefix: "oderators"
								if l := len("oderators"); len(elem) >= l && elem[0:l] == "oderators" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: ListGroupModerators
									s.handleListGroupModeratorsRequest([1]string{
										args[0],
									}, w, r)

									return
								}
							}
						case 's': // Prefix: "streamers"
							if l := len("streamers"); len(elem) >= l && elem[0:l] == "streamers" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf: ListGroupStreamers
								s.handleListGroupStreamersRequest([1]string{
									args[0],
								}, w, r)

								return
							}
						case 'v': // Prefix: "videos"
							if l := len("videos"); len(elem) >= l && elem[0:l] == "videos" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf: ListGroupVideos
								s.handleListGroupVideosRequest([1]string{
									args[0],
								}, w, r)

								return
							}
						}
					}
				}
			case 'u': // Prefix: "users"
				if l := len("users"); len(elem) >= l && elem[0:l] == "users" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					s.handleListUserRequest([0]string{}, w, r)

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						s.handleReadUserRequest([1]string{
							args[0],
						}, w, r)

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleListUserJoinedGroupsRequest([1]string{
								args[0],
							}, w, r)

							return
						}
						switch elem[0] {
						case 'a': // Prefix: "admin-groups"
							if l := len("admin-groups"); len(elem) >= l && elem[0:l] == "admin-groups" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf: ListUserAdminGroups
								s.handleListUserAdminGroupsRequest([1]string{
									args[0],
								}, w, r)

								return
							}
						case 'j': // Prefix: "joined-groups"
							if l := len("joined-groups"); len(elem) >= l && elem[0:l] == "joined-groups" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf: ListUserJoinedGroups
								s.handleListUserJoinedGroupsRequest([1]string{
									args[0],
								}, w, r)

								return
							}
						case 'l': // Prefix: "liked-videos"
							if l := len("liked-videos"); len(elem) >= l && elem[0:l] == "liked-videos" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf: ListUserLikedVideos
								s.handleListUserLikedVideosRequest([1]string{
									args[0],
								}, w, r)

								return
							}
						case 'm': // Prefix: "moderat"
							if l := len("moderat"); len(elem) >= l && elem[0:l] == "moderat" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleListUserModeratingGroupsRequest([1]string{
									args[0],
								}, w, r)

								return
							}
							switch elem[0] {
							case 'e': // Prefix: "ed-videos"
								if l := len("ed-videos"); len(elem) >= l && elem[0:l] == "ed-videos" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: ListUserModeratedVideos
									s.handleListUserModeratedVideosRequest([1]string{
										args[0],
									}, w, r)

									return
								}
							case 'i': // Prefix: "ing-groups"
								if l := len("ing-groups"); len(elem) >= l && elem[0:l] == "ing-groups" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: ListUserModeratingGroups
									s.handleListUserModeratingGroupsRequest([1]string{
										args[0],
									}, w, r)

									return
								}
							}
						case 's': // Prefix: "stream"
							if l := len("stream"); len(elem) >= l && elem[0:l] == "stream" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								s.handleListUserStreamingGroupsRequest([1]string{
									args[0],
								}, w, r)

								return
							}
							switch elem[0] {
							case '-': // Prefix: "-videos"
								if l := len("-videos"); len(elem) >= l && elem[0:l] == "-videos" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: ListUserStreamVideos
									s.handleListUserStreamVideosRequest([1]string{
										args[0],
									}, w, r)

									return
								}
							case 'i': // Prefix: "ing-groups"
								if l := len("ing-groups"); len(elem) >= l && elem[0:l] == "ing-groups" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: ListUserStreamingGroups
									s.handleListUserStreamingGroupsRequest([1]string{
										args[0],
									}, w, r)

									return
								}
							}
						case 'v': // Prefix: "viewed-videos"
							if l := len("viewed-videos"); len(elem) >= l && elem[0:l] == "viewed-videos" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf: ListUserViewedVideos
								s.handleListUserViewedVideosRequest([1]string{
									args[0],
								}, w, r)

								return
							}
						}
					}
				}
			case 'v': // Prefix: "videos"
				if l := len("videos"); len(elem) >= l && elem[0:l] == "videos" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					s.handleListVideoRequest([0]string{}, w, r)

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						s.handleReadVideoRequest([1]string{
							args[0],
						}, w, r)

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							s.handleListVideoModeratersRequest([1]string{
								args[0],
							}, w, r)

							return
						}
						switch elem[0] {
						case 'g': // Prefix: "group"
							if l := len("group"); len(elem) >= l && elem[0:l] == "group" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf: ReadVideoGroup
								s.handleReadVideoGroupRequest([1]string{
									args[0],
								}, w, r)

								return
							}
						case 'l': // Prefix: "likes"
							if l := len("likes"); len(elem) >= l && elem[0:l] == "likes" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf: ListVideoLikes
								s.handleListVideoLikesRequest([1]string{
									args[0],
								}, w, r)

								return
							}
						case 'm': // Prefix: "moderaters"
							if l := len("moderaters"); len(elem) >= l && elem[0:l] == "moderaters" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf: ListVideoModeraters
								s.handleListVideoModeratersRequest([1]string{
									args[0],
								}, w, r)

								return
							}
						case 's': // Prefix: "streamers"
							if l := len("streamers"); len(elem) >= l && elem[0:l] == "streamers" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf: ListVideoStreamers
								s.handleListVideoStreamersRequest([1]string{
									args[0],
								}, w, r)

								return
							}
						case 'v': // Prefix: "viewers"
							if l := len("viewers"); len(elem) >= l && elem[0:l] == "viewers" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf: ListVideoViewers
								s.handleListVideoViewersRequest([1]string{
									args[0],
								}, w, r)

								return
							}
						}
					}
				}
			}
		}
	case "PATCH":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				s.handleUpdateUserRequest([1]string{
					args[0],
				}, w, r)

				return
			}
			switch elem[0] {
			case 'g': // Prefix: "groups/"
				if l := len("groups/"); len(elem) >= l && elem[0:l] == "groups/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: UpdateGroup
					s.handleUpdateGroupRequest([1]string{
						args[0],
					}, w, r)

					return
				}
			case 'u': // Prefix: "users/"
				if l := len("users/"); len(elem) >= l && elem[0:l] == "users/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: UpdateUser
					s.handleUpdateUserRequest([1]string{
						args[0],
					}, w, r)

					return
				}
			case 'v': // Prefix: "videos/"
				if l := len("videos/"); len(elem) >= l && elem[0:l] == "videos/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: UpdateVideo
					s.handleUpdateVideoRequest([1]string{
						args[0],
					}, w, r)

					return
				}
			}
		}
	case "POST":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				s.handleCreateUserRequest([0]string{}, w, r)

				return
			}
			switch elem[0] {
			case 'g': // Prefix: "groups"
				if l := len("groups"); len(elem) >= l && elem[0:l] == "groups" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: CreateGroup
					s.handleCreateGroupRequest([0]string{}, w, r)

					return
				}
			case 'u': // Prefix: "users"
				if l := len("users"); len(elem) >= l && elem[0:l] == "users" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: CreateUser
					s.handleCreateUserRequest([0]string{}, w, r)

					return
				}
			case 'v': // Prefix: "videos"
				if l := len("videos"); len(elem) >= l && elem[0:l] == "videos" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: CreateVideo
					s.handleCreateVideoRequest([0]string{}, w, r)

					return
				}
			}
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name  string
	count int
	args  [1]string
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.name
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
func (s *Server) FindRoute(method, path string) (r Route, _ bool) {
	var (
		args = [1]string{}
		elem = path
	)
	r.args = args

	// Static code generated router with unwrapped path search.
	switch method {
	case "DELETE":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				r.name = "DeleteUser"
				r.args = args
				r.count = 0
				return r, true
			}
			switch elem[0] {
			case 'g': // Prefix: "groups/"
				if l := len("groups/"); len(elem) >= l && elem[0:l] == "groups/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: DeleteGroup
					r.name = "DeleteGroup"
					r.args = args
					r.count = 1
					return r, true
				}
			case 'u': // Prefix: "users/"
				if l := len("users/"); len(elem) >= l && elem[0:l] == "users/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: DeleteUser
					r.name = "DeleteUser"
					r.args = args
					r.count = 1
					return r, true
				}
			case 'v': // Prefix: "videos/"
				if l := len("videos/"); len(elem) >= l && elem[0:l] == "videos/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: DeleteVideo
					r.name = "DeleteVideo"
					r.args = args
					r.count = 1
					return r, true
				}
			}
		}
	case "GET":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				r.name = "ListUser"
				r.args = args
				r.count = 0
				return r, true
			}
			switch elem[0] {
			case 'g': // Prefix: "groups"
				if l := len("groups"); len(elem) >= l && elem[0:l] == "groups" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					r.name = "ListGroup"
					r.args = args
					r.count = 0
					return r, true
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						r.name = "ReadGroup"
						r.args = args
						r.count = 1
						return r, true
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							r.name = "ListGroupMembers"
							r.args = args
							r.count = 1
							return r, true
						}
						switch elem[0] {
						case 'a': // Prefix: "admins"
							if l := len("admins"); len(elem) >= l && elem[0:l] == "admins" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf: ListGroupAdmins
								r.name = "ListGroupAdmins"
								r.args = args
								r.count = 1
								return r, true
							}
						case 'm': // Prefix: "m"
							if l := len("m"); len(elem) >= l && elem[0:l] == "m" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "ListGroupModerators"
								r.args = args
								r.count = 1
								return r, true
							}
							switch elem[0] {
							case 'e': // Prefix: "embers"
								if l := len("embers"); len(elem) >= l && elem[0:l] == "embers" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: ListGroupMembers
									r.name = "ListGroupMembers"
									r.args = args
									r.count = 1
									return r, true
								}
							case 'o': // Prefix: "oderators"
								if l := len("oderators"); len(elem) >= l && elem[0:l] == "oderators" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: ListGroupModerators
									r.name = "ListGroupModerators"
									r.args = args
									r.count = 1
									return r, true
								}
							}
						case 's': // Prefix: "streamers"
							if l := len("streamers"); len(elem) >= l && elem[0:l] == "streamers" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf: ListGroupStreamers
								r.name = "ListGroupStreamers"
								r.args = args
								r.count = 1
								return r, true
							}
						case 'v': // Prefix: "videos"
							if l := len("videos"); len(elem) >= l && elem[0:l] == "videos" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf: ListGroupVideos
								r.name = "ListGroupVideos"
								r.args = args
								r.count = 1
								return r, true
							}
						}
					}
				}
			case 'u': // Prefix: "users"
				if l := len("users"); len(elem) >= l && elem[0:l] == "users" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					r.name = "ListUser"
					r.args = args
					r.count = 0
					return r, true
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						r.name = "ReadUser"
						r.args = args
						r.count = 1
						return r, true
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							r.name = "ListUserJoinedGroups"
							r.args = args
							r.count = 1
							return r, true
						}
						switch elem[0] {
						case 'a': // Prefix: "admin-groups"
							if l := len("admin-groups"); len(elem) >= l && elem[0:l] == "admin-groups" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf: ListUserAdminGroups
								r.name = "ListUserAdminGroups"
								r.args = args
								r.count = 1
								return r, true
							}
						case 'j': // Prefix: "joined-groups"
							if l := len("joined-groups"); len(elem) >= l && elem[0:l] == "joined-groups" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf: ListUserJoinedGroups
								r.name = "ListUserJoinedGroups"
								r.args = args
								r.count = 1
								return r, true
							}
						case 'l': // Prefix: "liked-videos"
							if l := len("liked-videos"); len(elem) >= l && elem[0:l] == "liked-videos" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf: ListUserLikedVideos
								r.name = "ListUserLikedVideos"
								r.args = args
								r.count = 1
								return r, true
							}
						case 'm': // Prefix: "moderat"
							if l := len("moderat"); len(elem) >= l && elem[0:l] == "moderat" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "ListUserModeratingGroups"
								r.args = args
								r.count = 1
								return r, true
							}
							switch elem[0] {
							case 'e': // Prefix: "ed-videos"
								if l := len("ed-videos"); len(elem) >= l && elem[0:l] == "ed-videos" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: ListUserModeratedVideos
									r.name = "ListUserModeratedVideos"
									r.args = args
									r.count = 1
									return r, true
								}
							case 'i': // Prefix: "ing-groups"
								if l := len("ing-groups"); len(elem) >= l && elem[0:l] == "ing-groups" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: ListUserModeratingGroups
									r.name = "ListUserModeratingGroups"
									r.args = args
									r.count = 1
									return r, true
								}
							}
						case 's': // Prefix: "stream"
							if l := len("stream"); len(elem) >= l && elem[0:l] == "stream" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								r.name = "ListUserStreamingGroups"
								r.args = args
								r.count = 1
								return r, true
							}
							switch elem[0] {
							case '-': // Prefix: "-videos"
								if l := len("-videos"); len(elem) >= l && elem[0:l] == "-videos" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: ListUserStreamVideos
									r.name = "ListUserStreamVideos"
									r.args = args
									r.count = 1
									return r, true
								}
							case 'i': // Prefix: "ing-groups"
								if l := len("ing-groups"); len(elem) >= l && elem[0:l] == "ing-groups" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf: ListUserStreamingGroups
									r.name = "ListUserStreamingGroups"
									r.args = args
									r.count = 1
									return r, true
								}
							}
						case 'v': // Prefix: "viewed-videos"
							if l := len("viewed-videos"); len(elem) >= l && elem[0:l] == "viewed-videos" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf: ListUserViewedVideos
								r.name = "ListUserViewedVideos"
								r.args = args
								r.count = 1
								return r, true
							}
						}
					}
				}
			case 'v': // Prefix: "videos"
				if l := len("videos"); len(elem) >= l && elem[0:l] == "videos" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					r.name = "ListVideo"
					r.args = args
					r.count = 0
					return r, true
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "id"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						r.name = "ReadVideo"
						r.args = args
						r.count = 1
						return r, true
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							r.name = "ListVideoModeraters"
							r.args = args
							r.count = 1
							return r, true
						}
						switch elem[0] {
						case 'g': // Prefix: "group"
							if l := len("group"); len(elem) >= l && elem[0:l] == "group" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf: ReadVideoGroup
								r.name = "ReadVideoGroup"
								r.args = args
								r.count = 1
								return r, true
							}
						case 'l': // Prefix: "likes"
							if l := len("likes"); len(elem) >= l && elem[0:l] == "likes" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf: ListVideoLikes
								r.name = "ListVideoLikes"
								r.args = args
								r.count = 1
								return r, true
							}
						case 'm': // Prefix: "moderaters"
							if l := len("moderaters"); len(elem) >= l && elem[0:l] == "moderaters" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf: ListVideoModeraters
								r.name = "ListVideoModeraters"
								r.args = args
								r.count = 1
								return r, true
							}
						case 's': // Prefix: "streamers"
							if l := len("streamers"); len(elem) >= l && elem[0:l] == "streamers" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf: ListVideoStreamers
								r.name = "ListVideoStreamers"
								r.args = args
								r.count = 1
								return r, true
							}
						case 'v': // Prefix: "viewers"
							if l := len("viewers"); len(elem) >= l && elem[0:l] == "viewers" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf: ListVideoViewers
								r.name = "ListVideoViewers"
								r.args = args
								r.count = 1
								return r, true
							}
						}
					}
				}
			}
		}
	case "PATCH":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				r.name = "UpdateUser"
				r.args = args
				r.count = 0
				return r, true
			}
			switch elem[0] {
			case 'g': // Prefix: "groups/"
				if l := len("groups/"); len(elem) >= l && elem[0:l] == "groups/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: UpdateGroup
					r.name = "UpdateGroup"
					r.args = args
					r.count = 1
					return r, true
				}
			case 'u': // Prefix: "users/"
				if l := len("users/"); len(elem) >= l && elem[0:l] == "users/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: UpdateUser
					r.name = "UpdateUser"
					r.args = args
					r.count = 1
					return r, true
				}
			case 'v': // Prefix: "videos/"
				if l := len("videos/"); len(elem) >= l && elem[0:l] == "videos/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "id"
				// Leaf parameter
				args[0] = elem
				elem = ""

				if len(elem) == 0 {
					// Leaf: UpdateVideo
					r.name = "UpdateVideo"
					r.args = args
					r.count = 1
					return r, true
				}
			}
		}
	case "POST":
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				r.name = "CreateUser"
				r.args = args
				r.count = 0
				return r, true
			}
			switch elem[0] {
			case 'g': // Prefix: "groups"
				if l := len("groups"); len(elem) >= l && elem[0:l] == "groups" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: CreateGroup
					r.name = "CreateGroup"
					r.args = args
					r.count = 0
					return r, true
				}
			case 'u': // Prefix: "users"
				if l := len("users"); len(elem) >= l && elem[0:l] == "users" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: CreateUser
					r.name = "CreateUser"
					r.args = args
					r.count = 0
					return r, true
				}
			case 'v': // Prefix: "videos"
				if l := len("videos"); len(elem) >= l && elem[0:l] == "videos" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf: CreateVideo
					r.name = "CreateVideo"
					r.args = args
					r.count = 0
					return r, true
				}
			}
		}
	}
	return r, false
}
