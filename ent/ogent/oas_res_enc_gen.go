// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"math/big"
	"math/bits"
	"net"
	"net/http"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/trace"
)

// No-op definition for keeping imports.
var (
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = sort.Ints
	_ = http.MethodGet
	_ = io.Copy
	_ = json.Marshal
	_ = bytes.NewReader
	_ = strconv.ParseInt
	_ = time.Time{}
	_ = conv.ToInt32
	_ = uuid.UUID{}
	_ = uri.PathEncoder{}
	_ = url.URL{}
	_ = math.Mod
	_ = bits.LeadingZeros64
	_ = big.Rat{}
	_ = validate.Int{}
	_ = ht.NewRequest
	_ = net.IP{}
	_ = otelogen.Version
	_ = attribute.KeyValue{}
	_ = trace.TraceIDFromHex
	_ = otel.GetTracerProvider
	_ = metric.NewNoopMeterProvider
	_ = regexp.MustCompile
	_ = jx.Null
	_ = sync.Pool{}
	_ = codes.Unset
)

func encodeCreateGroupResponse(response CreateGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GroupCreate:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/groups"+`: unexpected response type: %T`, response)
	}
}

func encodeCreateUserResponse(response CreateUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *UserCreate:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/users"+`: unexpected response type: %T`, response)
	}
}

func encodeCreateVideoResponse(response CreateVideoRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *VideoCreate:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/videos"+`: unexpected response type: %T`, response)
	}
}

func encodeDeleteGroupResponse(response DeleteGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteGroupNoContent:
		w.WriteHeader(204)
		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/groups/{id}"+`: unexpected response type: %T`, response)
	}
}

func encodeDeleteUserResponse(response DeleteUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteUserNoContent:
		w.WriteHeader(204)
		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/users/{id}"+`: unexpected response type: %T`, response)
	}
}

func encodeDeleteVideoResponse(response DeleteVideoRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *DeleteVideoNoContent:
		w.WriteHeader(204)
		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/videos/{id}"+`: unexpected response type: %T`, response)
	}
}

func encodeListGroupResponse(response ListGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListGroupOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/groups"+`: unexpected response type: %T`, response)
	}
}

func encodeListGroupAdminsResponse(response ListGroupAdminsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListGroupAdminsOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/groups/{id}/admins"+`: unexpected response type: %T`, response)
	}
}

func encodeListGroupMembersResponse(response ListGroupMembersRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListGroupMembersOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/groups/{id}/members"+`: unexpected response type: %T`, response)
	}
}

func encodeListGroupModeratorsResponse(response ListGroupModeratorsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListGroupModeratorsOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/groups/{id}/moderators"+`: unexpected response type: %T`, response)
	}
}

func encodeListGroupStreamersResponse(response ListGroupStreamersRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListGroupStreamersOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/groups/{id}/streamers"+`: unexpected response type: %T`, response)
	}
}

func encodeListGroupVideosResponse(response ListGroupVideosRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListGroupVideosOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/groups/{id}/videos"+`: unexpected response type: %T`, response)
	}
}

func encodeListUserResponse(response ListUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListUserOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/users"+`: unexpected response type: %T`, response)
	}
}

func encodeListUserAdminGroupsResponse(response ListUserAdminGroupsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListUserAdminGroupsOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/users/{id}/admin-groups"+`: unexpected response type: %T`, response)
	}
}

func encodeListUserJoinedGroupsResponse(response ListUserJoinedGroupsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListUserJoinedGroupsOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/users/{id}/joined-groups"+`: unexpected response type: %T`, response)
	}
}

func encodeListUserLikedVideosResponse(response ListUserLikedVideosRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListUserLikedVideosOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/users/{id}/liked-videos"+`: unexpected response type: %T`, response)
	}
}

func encodeListUserModeratedVideosResponse(response ListUserModeratedVideosRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListUserModeratedVideosOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/users/{id}/moderated-videos"+`: unexpected response type: %T`, response)
	}
}

func encodeListUserModeratingGroupsResponse(response ListUserModeratingGroupsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListUserModeratingGroupsOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/users/{id}/moderating-groups"+`: unexpected response type: %T`, response)
	}
}

func encodeListUserStreamVideosResponse(response ListUserStreamVideosRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListUserStreamVideosOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/users/{id}/stream-videos"+`: unexpected response type: %T`, response)
	}
}

func encodeListUserStreamingGroupsResponse(response ListUserStreamingGroupsRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListUserStreamingGroupsOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/users/{id}/streaming-groups"+`: unexpected response type: %T`, response)
	}
}

func encodeListUserViewedVideosResponse(response ListUserViewedVideosRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListUserViewedVideosOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/users/{id}/viewed-videos"+`: unexpected response type: %T`, response)
	}
}

func encodeListVideoResponse(response ListVideoRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListVideoOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/videos"+`: unexpected response type: %T`, response)
	}
}

func encodeListVideoLikesResponse(response ListVideoLikesRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListVideoLikesOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/videos/{id}/likes"+`: unexpected response type: %T`, response)
	}
}

func encodeListVideoModeratersResponse(response ListVideoModeratersRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListVideoModeratersOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/videos/{id}/moderaters"+`: unexpected response type: %T`, response)
	}
}

func encodeListVideoStreamersResponse(response ListVideoStreamersRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListVideoStreamersOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/videos/{id}/streamers"+`: unexpected response type: %T`, response)
	}
}

func encodeListVideoViewersResponse(response ListVideoViewersRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ListVideoViewersOKApplicationJSON:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/videos/{id}/viewers"+`: unexpected response type: %T`, response)
	}
}

func encodeReadGroupResponse(response ReadGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GroupRead:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/groups/{id}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadUserResponse(response ReadUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *UserRead:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/users/{id}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadVideoResponse(response ReadVideoRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *VideoRead:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/videos/{id}"+`: unexpected response type: %T`, response)
	}
}

func encodeReadVideoGroupResponse(response ReadVideoGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *VideoGroupRead:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/videos/{id}/group"+`: unexpected response type: %T`, response)
	}
}

func encodeUpdateGroupResponse(response UpdateGroupRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *GroupUpdate:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/groups/{id}"+`: unexpected response type: %T`, response)
	}
}

func encodeUpdateUserResponse(response UpdateUserRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *UserUpdate:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/users/{id}"+`: unexpected response type: %T`, response)
	}
}

func encodeUpdateVideoResponse(response UpdateVideoRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *VideoUpdate:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(200)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R400:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(400)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R404:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(404)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R409:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(409)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	case *R500:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(500)
		e := jx.GetWriter()
		defer jx.PutWriter(e)

		response.Encode(e)
		if _, err := e.WriteTo(w); err != nil {
			return errors.Wrap(err, "write")
		}

		return nil
	default:
		return errors.Errorf("/videos/{id}"+`: unexpected response type: %T`, response)
	}
}
