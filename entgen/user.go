// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"example.com/enumeg/entgen/user"
	"github.com/google/uuid"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID uuid.UUID `json:"uuid,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges UserEdges `json:"edges"`
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// JoinedGroups holds the value of the joined_groups edge.
	JoinedGroups []*Group `json:"joined_groups,omitempty"`
	// ModeratingGroups holds the value of the moderating_groups edge.
	ModeratingGroups []*Group `json:"moderating_groups,omitempty"`
	// StreamingGroups holds the value of the streaming_groups edge.
	StreamingGroups []*Group `json:"streaming_groups,omitempty"`
	// AdminGroups holds the value of the admin_groups edge.
	AdminGroups []*Group `json:"admin_groups,omitempty"`
	// StreamVideos holds the value of the stream_videos edge.
	StreamVideos []*Video `json:"stream_videos,omitempty"`
	// LikedVideos holds the value of the liked_videos edge.
	LikedVideos []*Video `json:"liked_videos,omitempty"`
	// ViewedVideos holds the value of the viewed_videos edge.
	ViewedVideos []*Video `json:"viewed_videos,omitempty"`
	// ModeratedVideos holds the value of the moderated_videos edge.
	ModeratedVideos []*Video `json:"moderated_videos,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [8]bool
}

// JoinedGroupsOrErr returns the JoinedGroups value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) JoinedGroupsOrErr() ([]*Group, error) {
	if e.loadedTypes[0] {
		return e.JoinedGroups, nil
	}
	return nil, &NotLoadedError{edge: "joined_groups"}
}

// ModeratingGroupsOrErr returns the ModeratingGroups value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ModeratingGroupsOrErr() ([]*Group, error) {
	if e.loadedTypes[1] {
		return e.ModeratingGroups, nil
	}
	return nil, &NotLoadedError{edge: "moderating_groups"}
}

// StreamingGroupsOrErr returns the StreamingGroups value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) StreamingGroupsOrErr() ([]*Group, error) {
	if e.loadedTypes[2] {
		return e.StreamingGroups, nil
	}
	return nil, &NotLoadedError{edge: "streaming_groups"}
}

// AdminGroupsOrErr returns the AdminGroups value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) AdminGroupsOrErr() ([]*Group, error) {
	if e.loadedTypes[3] {
		return e.AdminGroups, nil
	}
	return nil, &NotLoadedError{edge: "admin_groups"}
}

// StreamVideosOrErr returns the StreamVideos value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) StreamVideosOrErr() ([]*Video, error) {
	if e.loadedTypes[4] {
		return e.StreamVideos, nil
	}
	return nil, &NotLoadedError{edge: "stream_videos"}
}

// LikedVideosOrErr returns the LikedVideos value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) LikedVideosOrErr() ([]*Video, error) {
	if e.loadedTypes[5] {
		return e.LikedVideos, nil
	}
	return nil, &NotLoadedError{edge: "liked_videos"}
}

// ViewedVideosOrErr returns the ViewedVideos value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ViewedVideosOrErr() ([]*Video, error) {
	if e.loadedTypes[6] {
		return e.ViewedVideos, nil
	}
	return nil, &NotLoadedError{edge: "viewed_videos"}
}

// ModeratedVideosOrErr returns the ModeratedVideos value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ModeratedVideosOrErr() ([]*Video, error) {
	if e.loadedTypes[7] {
		return e.ModeratedVideos, nil
	}
	return nil, &NotLoadedError{edge: "moderated_videos"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			values[i] = new(sql.NullInt64)
		case user.FieldName, user.FieldPassword:
			values[i] = new(sql.NullString)
		case user.FieldUUID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case user.FieldUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value != nil {
				u.UUID = *value
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				u.Password = value.String
			}
		}
	}
	return nil
}

// QueryJoinedGroups queries the "joined_groups" edge of the User entity.
func (u *User) QueryJoinedGroups() *GroupQuery {
	return (&UserClient{config: u.config}).QueryJoinedGroups(u)
}

// QueryModeratingGroups queries the "moderating_groups" edge of the User entity.
func (u *User) QueryModeratingGroups() *GroupQuery {
	return (&UserClient{config: u.config}).QueryModeratingGroups(u)
}

// QueryStreamingGroups queries the "streaming_groups" edge of the User entity.
func (u *User) QueryStreamingGroups() *GroupQuery {
	return (&UserClient{config: u.config}).QueryStreamingGroups(u)
}

// QueryAdminGroups queries the "admin_groups" edge of the User entity.
func (u *User) QueryAdminGroups() *GroupQuery {
	return (&UserClient{config: u.config}).QueryAdminGroups(u)
}

// QueryStreamVideos queries the "stream_videos" edge of the User entity.
func (u *User) QueryStreamVideos() *VideoQuery {
	return (&UserClient{config: u.config}).QueryStreamVideos(u)
}

// QueryLikedVideos queries the "liked_videos" edge of the User entity.
func (u *User) QueryLikedVideos() *VideoQuery {
	return (&UserClient{config: u.config}).QueryLikedVideos(u)
}

// QueryViewedVideos queries the "viewed_videos" edge of the User entity.
func (u *User) QueryViewedVideos() *VideoQuery {
	return (&UserClient{config: u.config}).QueryViewedVideos(u)
}

// QueryModeratedVideos queries the "moderated_videos" edge of the User entity.
func (u *User) QueryModeratedVideos() *VideoQuery {
	return (&UserClient{config: u.config}).QueryModeratedVideos(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("entgen: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", name=")
	builder.WriteString(u.Name)
	builder.WriteString(", uuid=")
	builder.WriteString(fmt.Sprintf("%v", u.UUID))
	builder.WriteString(", password=")
	builder.WriteString(u.Password)
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
