// Code generated by entc, DO NOT EDIT.

package ogent

import "example.com/enumeg/entgen"

func NewGroupCreate(e *entgen.Group) *GroupCreate {
	if e == nil {
		return nil
	}
	return &GroupCreate{
		ID:          e.ID,
		Name:        e.Name,
		Description: e.Description,
		URL:         e.URL,
		Thumbnail:   e.Thumbnail,
		Views:       e.Views,
		Subscribers: e.Subscribers,
		CreatedAt:   e.CreatedAt,
	}
}

func NewGroupCreates(es []*entgen.Group) []GroupCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]GroupCreate, len(es))
	for i, e := range es {
		r[i] = NewGroupCreate(e).Elem()
	}
	return r
}

func (gr *GroupCreate) Elem() GroupCreate {
	if gr != nil {
		return GroupCreate{}
	}
	return *gr
}

func NewGroupList(e *entgen.Group) *GroupList {
	if e == nil {
		return nil
	}
	return &GroupList{
		ID:          e.ID,
		Name:        e.Name,
		Description: e.Description,
		URL:         e.URL,
		Thumbnail:   e.Thumbnail,
		Views:       e.Views,
		Subscribers: e.Subscribers,
		CreatedAt:   e.CreatedAt,
	}
}

func NewGroupLists(es []*entgen.Group) []GroupList {
	if len(es) == 0 {
		return nil
	}
	r := make([]GroupList, len(es))
	for i, e := range es {
		r[i] = NewGroupList(e).Elem()
	}
	return r
}

func (gr *GroupList) Elem() GroupList {
	if gr != nil {
		return GroupList{}
	}
	return *gr
}

func NewGroupRead(e *entgen.Group) *GroupRead {
	if e == nil {
		return nil
	}
	return &GroupRead{
		ID:          e.ID,
		Name:        e.Name,
		Description: e.Description,
		URL:         e.URL,
		Thumbnail:   e.Thumbnail,
		Views:       e.Views,
		Subscribers: e.Subscribers,
		CreatedAt:   e.CreatedAt,
	}
}

func NewGroupReads(es []*entgen.Group) []GroupRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]GroupRead, len(es))
	for i, e := range es {
		r[i] = NewGroupRead(e).Elem()
	}
	return r
}

func (gr *GroupRead) Elem() GroupRead {
	if gr != nil {
		return GroupRead{}
	}
	return *gr
}

func NewGroupUpdate(e *entgen.Group) *GroupUpdate {
	if e == nil {
		return nil
	}
	return &GroupUpdate{
		ID:          e.ID,
		Name:        e.Name,
		Description: e.Description,
		URL:         e.URL,
		Thumbnail:   e.Thumbnail,
		Views:       e.Views,
		Subscribers: e.Subscribers,
		CreatedAt:   e.CreatedAt,
	}
}

func NewGroupUpdates(es []*entgen.Group) []GroupUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]GroupUpdate, len(es))
	for i, e := range es {
		r[i] = NewGroupUpdate(e).Elem()
	}
	return r
}

func (gr *GroupUpdate) Elem() GroupUpdate {
	if gr != nil {
		return GroupUpdate{}
	}
	return *gr
}

func NewGroupAdminsList(e *entgen.User) *GroupAdminsList {
	if e == nil {
		return nil
	}
	return &GroupAdminsList{
		ID:       e.ID,
		Name:     e.Name,
		UUID:     e.UUID,
		Password: e.Password,
	}
}

func NewGroupAdminsLists(es []*entgen.User) []GroupAdminsList {
	if len(es) == 0 {
		return nil
	}
	r := make([]GroupAdminsList, len(es))
	for i, e := range es {
		r[i] = NewGroupAdminsList(e).Elem()
	}
	return r
}

func (u *GroupAdminsList) Elem() GroupAdminsList {
	if u != nil {
		return GroupAdminsList{}
	}
	return *u
}

func NewGroupMembersList(e *entgen.User) *GroupMembersList {
	if e == nil {
		return nil
	}
	return &GroupMembersList{
		ID:       e.ID,
		Name:     e.Name,
		UUID:     e.UUID,
		Password: e.Password,
	}
}

func NewGroupMembersLists(es []*entgen.User) []GroupMembersList {
	if len(es) == 0 {
		return nil
	}
	r := make([]GroupMembersList, len(es))
	for i, e := range es {
		r[i] = NewGroupMembersList(e).Elem()
	}
	return r
}

func (u *GroupMembersList) Elem() GroupMembersList {
	if u != nil {
		return GroupMembersList{}
	}
	return *u
}

func NewGroupModeratorsList(e *entgen.User) *GroupModeratorsList {
	if e == nil {
		return nil
	}
	return &GroupModeratorsList{
		ID:       e.ID,
		Name:     e.Name,
		UUID:     e.UUID,
		Password: e.Password,
	}
}

func NewGroupModeratorsLists(es []*entgen.User) []GroupModeratorsList {
	if len(es) == 0 {
		return nil
	}
	r := make([]GroupModeratorsList, len(es))
	for i, e := range es {
		r[i] = NewGroupModeratorsList(e).Elem()
	}
	return r
}

func (u *GroupModeratorsList) Elem() GroupModeratorsList {
	if u != nil {
		return GroupModeratorsList{}
	}
	return *u
}

func NewGroupStreamersList(e *entgen.User) *GroupStreamersList {
	if e == nil {
		return nil
	}
	return &GroupStreamersList{
		ID:       e.ID,
		Name:     e.Name,
		UUID:     e.UUID,
		Password: e.Password,
	}
}

func NewGroupStreamersLists(es []*entgen.User) []GroupStreamersList {
	if len(es) == 0 {
		return nil
	}
	r := make([]GroupStreamersList, len(es))
	for i, e := range es {
		r[i] = NewGroupStreamersList(e).Elem()
	}
	return r
}

func (u *GroupStreamersList) Elem() GroupStreamersList {
	if u != nil {
		return GroupStreamersList{}
	}
	return *u
}

func NewGroupVideosList(e *entgen.Video) *GroupVideosList {
	if e == nil {
		return nil
	}
	return &GroupVideosList{
		ID:          e.ID,
		UUID:        e.UUID,
		Title:       e.Title,
		Description: e.Description,
		Videotype:   e.Videotype,
		CreatedAt:   e.CreatedAt,
	}
}

func NewGroupVideosLists(es []*entgen.Video) []GroupVideosList {
	if len(es) == 0 {
		return nil
	}
	r := make([]GroupVideosList, len(es))
	for i, e := range es {
		r[i] = NewGroupVideosList(e).Elem()
	}
	return r
}

func (v *GroupVideosList) Elem() GroupVideosList {
	if v != nil {
		return GroupVideosList{}
	}
	return *v
}

func NewUserCreate(e *entgen.User) *UserCreate {
	if e == nil {
		return nil
	}
	return &UserCreate{
		ID:       e.ID,
		Name:     e.Name,
		UUID:     e.UUID,
		Password: e.Password,
	}
}

func NewUserCreates(es []*entgen.User) []UserCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]UserCreate, len(es))
	for i, e := range es {
		r[i] = NewUserCreate(e).Elem()
	}
	return r
}

func (u *UserCreate) Elem() UserCreate {
	if u != nil {
		return UserCreate{}
	}
	return *u
}

func NewUserList(e *entgen.User) *UserList {
	if e == nil {
		return nil
	}
	return &UserList{
		ID:       e.ID,
		Name:     e.Name,
		UUID:     e.UUID,
		Password: e.Password,
	}
}

func NewUserLists(es []*entgen.User) []UserList {
	if len(es) == 0 {
		return nil
	}
	r := make([]UserList, len(es))
	for i, e := range es {
		r[i] = NewUserList(e).Elem()
	}
	return r
}

func (u *UserList) Elem() UserList {
	if u != nil {
		return UserList{}
	}
	return *u
}

func NewUserRead(e *entgen.User) *UserRead {
	if e == nil {
		return nil
	}
	return &UserRead{
		ID:       e.ID,
		Name:     e.Name,
		UUID:     e.UUID,
		Password: e.Password,
	}
}

func NewUserReads(es []*entgen.User) []UserRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]UserRead, len(es))
	for i, e := range es {
		r[i] = NewUserRead(e).Elem()
	}
	return r
}

func (u *UserRead) Elem() UserRead {
	if u != nil {
		return UserRead{}
	}
	return *u
}

func NewUserUpdate(e *entgen.User) *UserUpdate {
	if e == nil {
		return nil
	}
	return &UserUpdate{
		ID:       e.ID,
		Name:     e.Name,
		UUID:     e.UUID,
		Password: e.Password,
	}
}

func NewUserUpdates(es []*entgen.User) []UserUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]UserUpdate, len(es))
	for i, e := range es {
		r[i] = NewUserUpdate(e).Elem()
	}
	return r
}

func (u *UserUpdate) Elem() UserUpdate {
	if u != nil {
		return UserUpdate{}
	}
	return *u
}

func NewUserAdminGroupsList(e *entgen.Group) *UserAdminGroupsList {
	if e == nil {
		return nil
	}
	return &UserAdminGroupsList{
		ID:          e.ID,
		Name:        e.Name,
		Description: e.Description,
		URL:         e.URL,
		Thumbnail:   e.Thumbnail,
		Views:       e.Views,
		Subscribers: e.Subscribers,
		CreatedAt:   e.CreatedAt,
	}
}

func NewUserAdminGroupsLists(es []*entgen.Group) []UserAdminGroupsList {
	if len(es) == 0 {
		return nil
	}
	r := make([]UserAdminGroupsList, len(es))
	for i, e := range es {
		r[i] = NewUserAdminGroupsList(e).Elem()
	}
	return r
}

func (gr *UserAdminGroupsList) Elem() UserAdminGroupsList {
	if gr != nil {
		return UserAdminGroupsList{}
	}
	return *gr
}

func NewUserJoinedGroupsList(e *entgen.Group) *UserJoinedGroupsList {
	if e == nil {
		return nil
	}
	return &UserJoinedGroupsList{
		ID:          e.ID,
		Name:        e.Name,
		Description: e.Description,
		URL:         e.URL,
		Thumbnail:   e.Thumbnail,
		Views:       e.Views,
		Subscribers: e.Subscribers,
		CreatedAt:   e.CreatedAt,
	}
}

func NewUserJoinedGroupsLists(es []*entgen.Group) []UserJoinedGroupsList {
	if len(es) == 0 {
		return nil
	}
	r := make([]UserJoinedGroupsList, len(es))
	for i, e := range es {
		r[i] = NewUserJoinedGroupsList(e).Elem()
	}
	return r
}

func (gr *UserJoinedGroupsList) Elem() UserJoinedGroupsList {
	if gr != nil {
		return UserJoinedGroupsList{}
	}
	return *gr
}

func NewUserLikedVideosList(e *entgen.Video) *UserLikedVideosList {
	if e == nil {
		return nil
	}
	return &UserLikedVideosList{
		ID:          e.ID,
		UUID:        e.UUID,
		Title:       e.Title,
		Description: e.Description,
		Videotype:   e.Videotype,
		CreatedAt:   e.CreatedAt,
	}
}

func NewUserLikedVideosLists(es []*entgen.Video) []UserLikedVideosList {
	if len(es) == 0 {
		return nil
	}
	r := make([]UserLikedVideosList, len(es))
	for i, e := range es {
		r[i] = NewUserLikedVideosList(e).Elem()
	}
	return r
}

func (v *UserLikedVideosList) Elem() UserLikedVideosList {
	if v != nil {
		return UserLikedVideosList{}
	}
	return *v
}

func NewUserModeratedVideosList(e *entgen.Video) *UserModeratedVideosList {
	if e == nil {
		return nil
	}
	return &UserModeratedVideosList{
		ID:          e.ID,
		UUID:        e.UUID,
		Title:       e.Title,
		Description: e.Description,
		Videotype:   e.Videotype,
		CreatedAt:   e.CreatedAt,
	}
}

func NewUserModeratedVideosLists(es []*entgen.Video) []UserModeratedVideosList {
	if len(es) == 0 {
		return nil
	}
	r := make([]UserModeratedVideosList, len(es))
	for i, e := range es {
		r[i] = NewUserModeratedVideosList(e).Elem()
	}
	return r
}

func (v *UserModeratedVideosList) Elem() UserModeratedVideosList {
	if v != nil {
		return UserModeratedVideosList{}
	}
	return *v
}

func NewUserModeratingGroupsList(e *entgen.Group) *UserModeratingGroupsList {
	if e == nil {
		return nil
	}
	return &UserModeratingGroupsList{
		ID:          e.ID,
		Name:        e.Name,
		Description: e.Description,
		URL:         e.URL,
		Thumbnail:   e.Thumbnail,
		Views:       e.Views,
		Subscribers: e.Subscribers,
		CreatedAt:   e.CreatedAt,
	}
}

func NewUserModeratingGroupsLists(es []*entgen.Group) []UserModeratingGroupsList {
	if len(es) == 0 {
		return nil
	}
	r := make([]UserModeratingGroupsList, len(es))
	for i, e := range es {
		r[i] = NewUserModeratingGroupsList(e).Elem()
	}
	return r
}

func (gr *UserModeratingGroupsList) Elem() UserModeratingGroupsList {
	if gr != nil {
		return UserModeratingGroupsList{}
	}
	return *gr
}

func NewUserStreamVideosList(e *entgen.Video) *UserStreamVideosList {
	if e == nil {
		return nil
	}
	return &UserStreamVideosList{
		ID:          e.ID,
		UUID:        e.UUID,
		Title:       e.Title,
		Description: e.Description,
		Videotype:   e.Videotype,
		CreatedAt:   e.CreatedAt,
	}
}

func NewUserStreamVideosLists(es []*entgen.Video) []UserStreamVideosList {
	if len(es) == 0 {
		return nil
	}
	r := make([]UserStreamVideosList, len(es))
	for i, e := range es {
		r[i] = NewUserStreamVideosList(e).Elem()
	}
	return r
}

func (v *UserStreamVideosList) Elem() UserStreamVideosList {
	if v != nil {
		return UserStreamVideosList{}
	}
	return *v
}

func NewUserStreamingGroupsList(e *entgen.Group) *UserStreamingGroupsList {
	if e == nil {
		return nil
	}
	return &UserStreamingGroupsList{
		ID:          e.ID,
		Name:        e.Name,
		Description: e.Description,
		URL:         e.URL,
		Thumbnail:   e.Thumbnail,
		Views:       e.Views,
		Subscribers: e.Subscribers,
		CreatedAt:   e.CreatedAt,
	}
}

func NewUserStreamingGroupsLists(es []*entgen.Group) []UserStreamingGroupsList {
	if len(es) == 0 {
		return nil
	}
	r := make([]UserStreamingGroupsList, len(es))
	for i, e := range es {
		r[i] = NewUserStreamingGroupsList(e).Elem()
	}
	return r
}

func (gr *UserStreamingGroupsList) Elem() UserStreamingGroupsList {
	if gr != nil {
		return UserStreamingGroupsList{}
	}
	return *gr
}

func NewUserViewedVideosList(e *entgen.Video) *UserViewedVideosList {
	if e == nil {
		return nil
	}
	return &UserViewedVideosList{
		ID:          e.ID,
		UUID:        e.UUID,
		Title:       e.Title,
		Description: e.Description,
		Videotype:   e.Videotype,
		CreatedAt:   e.CreatedAt,
	}
}

func NewUserViewedVideosLists(es []*entgen.Video) []UserViewedVideosList {
	if len(es) == 0 {
		return nil
	}
	r := make([]UserViewedVideosList, len(es))
	for i, e := range es {
		r[i] = NewUserViewedVideosList(e).Elem()
	}
	return r
}

func (v *UserViewedVideosList) Elem() UserViewedVideosList {
	if v != nil {
		return UserViewedVideosList{}
	}
	return *v
}

func NewVideoCreate(e *entgen.Video) *VideoCreate {
	if e == nil {
		return nil
	}
	return &VideoCreate{
		ID:          e.ID,
		UUID:        e.UUID,
		Title:       e.Title,
		Description: e.Description,
		Videotype:   e.Videotype,
		CreatedAt:   e.CreatedAt,
	}
}

func NewVideoCreates(es []*entgen.Video) []VideoCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]VideoCreate, len(es))
	for i, e := range es {
		r[i] = NewVideoCreate(e).Elem()
	}
	return r
}

func (v *VideoCreate) Elem() VideoCreate {
	if v != nil {
		return VideoCreate{}
	}
	return *v
}

func NewVideoList(e *entgen.Video) *VideoList {
	if e == nil {
		return nil
	}
	return &VideoList{
		ID:          e.ID,
		UUID:        e.UUID,
		Title:       e.Title,
		Description: e.Description,
		Videotype:   e.Videotype,
		CreatedAt:   e.CreatedAt,
	}
}

func NewVideoLists(es []*entgen.Video) []VideoList {
	if len(es) == 0 {
		return nil
	}
	r := make([]VideoList, len(es))
	for i, e := range es {
		r[i] = NewVideoList(e).Elem()
	}
	return r
}

func (v *VideoList) Elem() VideoList {
	if v != nil {
		return VideoList{}
	}
	return *v
}

func NewVideoRead(e *entgen.Video) *VideoRead {
	if e == nil {
		return nil
	}
	return &VideoRead{
		ID:          e.ID,
		UUID:        e.UUID,
		Title:       e.Title,
		Description: e.Description,
		Videotype:   e.Videotype,
		CreatedAt:   e.CreatedAt,
	}
}

func NewVideoReads(es []*entgen.Video) []VideoRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]VideoRead, len(es))
	for i, e := range es {
		r[i] = NewVideoRead(e).Elem()
	}
	return r
}

func (v *VideoRead) Elem() VideoRead {
	if v != nil {
		return VideoRead{}
	}
	return *v
}

func NewVideoUpdate(e *entgen.Video) *VideoUpdate {
	if e == nil {
		return nil
	}
	return &VideoUpdate{
		ID:          e.ID,
		UUID:        e.UUID,
		Title:       e.Title,
		Description: e.Description,
		Videotype:   e.Videotype,
		CreatedAt:   e.CreatedAt,
	}
}

func NewVideoUpdates(es []*entgen.Video) []VideoUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]VideoUpdate, len(es))
	for i, e := range es {
		r[i] = NewVideoUpdate(e).Elem()
	}
	return r
}

func (v *VideoUpdate) Elem() VideoUpdate {
	if v != nil {
		return VideoUpdate{}
	}
	return *v
}

func NewVideoGroupRead(e *entgen.Group) *VideoGroupRead {
	if e == nil {
		return nil
	}
	return &VideoGroupRead{
		ID:          e.ID,
		Name:        e.Name,
		Description: e.Description,
		URL:         e.URL,
		Thumbnail:   e.Thumbnail,
		Views:       e.Views,
		Subscribers: e.Subscribers,
		CreatedAt:   e.CreatedAt,
	}
}

func NewVideoGroupReads(es []*entgen.Group) []VideoGroupRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]VideoGroupRead, len(es))
	for i, e := range es {
		r[i] = NewVideoGroupRead(e).Elem()
	}
	return r
}

func (gr *VideoGroupRead) Elem() VideoGroupRead {
	if gr != nil {
		return VideoGroupRead{}
	}
	return *gr
}

func NewVideoLikesList(e *entgen.User) *VideoLikesList {
	if e == nil {
		return nil
	}
	return &VideoLikesList{
		ID:       e.ID,
		Name:     e.Name,
		UUID:     e.UUID,
		Password: e.Password,
	}
}

func NewVideoLikesLists(es []*entgen.User) []VideoLikesList {
	if len(es) == 0 {
		return nil
	}
	r := make([]VideoLikesList, len(es))
	for i, e := range es {
		r[i] = NewVideoLikesList(e).Elem()
	}
	return r
}

func (u *VideoLikesList) Elem() VideoLikesList {
	if u != nil {
		return VideoLikesList{}
	}
	return *u
}

func NewVideoModeratersList(e *entgen.User) *VideoModeratersList {
	if e == nil {
		return nil
	}
	return &VideoModeratersList{
		ID:       e.ID,
		Name:     e.Name,
		UUID:     e.UUID,
		Password: e.Password,
	}
}

func NewVideoModeratersLists(es []*entgen.User) []VideoModeratersList {
	if len(es) == 0 {
		return nil
	}
	r := make([]VideoModeratersList, len(es))
	for i, e := range es {
		r[i] = NewVideoModeratersList(e).Elem()
	}
	return r
}

func (u *VideoModeratersList) Elem() VideoModeratersList {
	if u != nil {
		return VideoModeratersList{}
	}
	return *u
}

func NewVideoStreamersList(e *entgen.User) *VideoStreamersList {
	if e == nil {
		return nil
	}
	return &VideoStreamersList{
		ID:       e.ID,
		Name:     e.Name,
		UUID:     e.UUID,
		Password: e.Password,
	}
}

func NewVideoStreamersLists(es []*entgen.User) []VideoStreamersList {
	if len(es) == 0 {
		return nil
	}
	r := make([]VideoStreamersList, len(es))
	for i, e := range es {
		r[i] = NewVideoStreamersList(e).Elem()
	}
	return r
}

func (u *VideoStreamersList) Elem() VideoStreamersList {
	if u != nil {
		return VideoStreamersList{}
	}
	return *u
}

func NewVideoViewersList(e *entgen.User) *VideoViewersList {
	if e == nil {
		return nil
	}
	return &VideoViewersList{
		ID:       e.ID,
		Name:     e.Name,
		UUID:     e.UUID,
		Password: e.Password,
	}
}

func NewVideoViewersLists(es []*entgen.User) []VideoViewersList {
	if len(es) == 0 {
		return nil
	}
	r := make([]VideoViewersList, len(es))
	for i, e := range es {
		r[i] = NewVideoViewersList(e).Elem()
	}
	return r
}

func (u *VideoViewersList) Elem() VideoViewersList {
	if u != nil {
		return VideoViewersList{}
	}
	return *u
}
