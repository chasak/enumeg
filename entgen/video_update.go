// Code generated by entc, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"example.com/enumeg/entgen/group"
	"example.com/enumeg/entgen/predicate"
	"example.com/enumeg/entgen/user"
	"example.com/enumeg/entgen/video"
	"github.com/google/uuid"
)

// VideoUpdate is the builder for updating Video entities.
type VideoUpdate struct {
	config
	hooks    []Hook
	mutation *VideoMutation
}

// Where appends a list predicates to the VideoUpdate builder.
func (vu *VideoUpdate) Where(ps ...predicate.Video) *VideoUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetUUID sets the "uuid" field.
func (vu *VideoUpdate) SetUUID(u uuid.UUID) *VideoUpdate {
	vu.mutation.SetUUID(u)
	return vu
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableUUID(u *uuid.UUID) *VideoUpdate {
	if u != nil {
		vu.SetUUID(*u)
	}
	return vu
}

// SetTitle sets the "title" field.
func (vu *VideoUpdate) SetTitle(s string) *VideoUpdate {
	vu.mutation.SetTitle(s)
	return vu
}

// SetDescription sets the "description" field.
func (vu *VideoUpdate) SetDescription(s string) *VideoUpdate {
	vu.mutation.SetDescription(s)
	return vu
}

// SetVideotype sets the "videotype" field.
func (vu *VideoUpdate) SetVideotype(v video.Videotype) *VideoUpdate {
	vu.mutation.SetVideotype(v)
	return vu
}

// SetCreatedAt sets the "created_at" field.
func (vu *VideoUpdate) SetCreatedAt(t time.Time) *VideoUpdate {
	vu.mutation.SetCreatedAt(t)
	return vu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vu *VideoUpdate) SetNillableCreatedAt(t *time.Time) *VideoUpdate {
	if t != nil {
		vu.SetCreatedAt(*t)
	}
	return vu
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (vu *VideoUpdate) SetGroupID(id int) *VideoUpdate {
	vu.mutation.SetGroupID(id)
	return vu
}

// SetNillableGroupID sets the "group" edge to the Group entity by ID if the given value is not nil.
func (vu *VideoUpdate) SetNillableGroupID(id *int) *VideoUpdate {
	if id != nil {
		vu = vu.SetGroupID(*id)
	}
	return vu
}

// SetGroup sets the "group" edge to the Group entity.
func (vu *VideoUpdate) SetGroup(g *Group) *VideoUpdate {
	return vu.SetGroupID(g.ID)
}

// AddStreamerIDs adds the "streamers" edge to the User entity by IDs.
func (vu *VideoUpdate) AddStreamerIDs(ids ...int) *VideoUpdate {
	vu.mutation.AddStreamerIDs(ids...)
	return vu
}

// AddStreamers adds the "streamers" edges to the User entity.
func (vu *VideoUpdate) AddStreamers(u ...*User) *VideoUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return vu.AddStreamerIDs(ids...)
}

// AddModeraterIDs adds the "moderaters" edge to the User entity by IDs.
func (vu *VideoUpdate) AddModeraterIDs(ids ...int) *VideoUpdate {
	vu.mutation.AddModeraterIDs(ids...)
	return vu
}

// AddModeraters adds the "moderaters" edges to the User entity.
func (vu *VideoUpdate) AddModeraters(u ...*User) *VideoUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return vu.AddModeraterIDs(ids...)
}

// AddLikeIDs adds the "likes" edge to the User entity by IDs.
func (vu *VideoUpdate) AddLikeIDs(ids ...int) *VideoUpdate {
	vu.mutation.AddLikeIDs(ids...)
	return vu
}

// AddLikes adds the "likes" edges to the User entity.
func (vu *VideoUpdate) AddLikes(u ...*User) *VideoUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return vu.AddLikeIDs(ids...)
}

// AddViewerIDs adds the "viewers" edge to the User entity by IDs.
func (vu *VideoUpdate) AddViewerIDs(ids ...int) *VideoUpdate {
	vu.mutation.AddViewerIDs(ids...)
	return vu
}

// AddViewers adds the "viewers" edges to the User entity.
func (vu *VideoUpdate) AddViewers(u ...*User) *VideoUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return vu.AddViewerIDs(ids...)
}

// Mutation returns the VideoMutation object of the builder.
func (vu *VideoUpdate) Mutation() *VideoMutation {
	return vu.mutation
}

// ClearGroup clears the "group" edge to the Group entity.
func (vu *VideoUpdate) ClearGroup() *VideoUpdate {
	vu.mutation.ClearGroup()
	return vu
}

// ClearStreamers clears all "streamers" edges to the User entity.
func (vu *VideoUpdate) ClearStreamers() *VideoUpdate {
	vu.mutation.ClearStreamers()
	return vu
}

// RemoveStreamerIDs removes the "streamers" edge to User entities by IDs.
func (vu *VideoUpdate) RemoveStreamerIDs(ids ...int) *VideoUpdate {
	vu.mutation.RemoveStreamerIDs(ids...)
	return vu
}

// RemoveStreamers removes "streamers" edges to User entities.
func (vu *VideoUpdate) RemoveStreamers(u ...*User) *VideoUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return vu.RemoveStreamerIDs(ids...)
}

// ClearModeraters clears all "moderaters" edges to the User entity.
func (vu *VideoUpdate) ClearModeraters() *VideoUpdate {
	vu.mutation.ClearModeraters()
	return vu
}

// RemoveModeraterIDs removes the "moderaters" edge to User entities by IDs.
func (vu *VideoUpdate) RemoveModeraterIDs(ids ...int) *VideoUpdate {
	vu.mutation.RemoveModeraterIDs(ids...)
	return vu
}

// RemoveModeraters removes "moderaters" edges to User entities.
func (vu *VideoUpdate) RemoveModeraters(u ...*User) *VideoUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return vu.RemoveModeraterIDs(ids...)
}

// ClearLikes clears all "likes" edges to the User entity.
func (vu *VideoUpdate) ClearLikes() *VideoUpdate {
	vu.mutation.ClearLikes()
	return vu
}

// RemoveLikeIDs removes the "likes" edge to User entities by IDs.
func (vu *VideoUpdate) RemoveLikeIDs(ids ...int) *VideoUpdate {
	vu.mutation.RemoveLikeIDs(ids...)
	return vu
}

// RemoveLikes removes "likes" edges to User entities.
func (vu *VideoUpdate) RemoveLikes(u ...*User) *VideoUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return vu.RemoveLikeIDs(ids...)
}

// ClearViewers clears all "viewers" edges to the User entity.
func (vu *VideoUpdate) ClearViewers() *VideoUpdate {
	vu.mutation.ClearViewers()
	return vu
}

// RemoveViewerIDs removes the "viewers" edge to User entities by IDs.
func (vu *VideoUpdate) RemoveViewerIDs(ids ...int) *VideoUpdate {
	vu.mutation.RemoveViewerIDs(ids...)
	return vu
}

// RemoveViewers removes "viewers" edges to User entities.
func (vu *VideoUpdate) RemoveViewers(u ...*User) *VideoUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return vu.RemoveViewerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VideoUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(vu.hooks) == 0 {
		if err = vu.check(); err != nil {
			return 0, err
		}
		affected, err = vu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VideoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vu.check(); err != nil {
				return 0, err
			}
			vu.mutation = mutation
			affected, err = vu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vu.hooks) - 1; i >= 0; i-- {
			if vu.hooks[i] == nil {
				return 0, fmt.Errorf("entgen: uninitialized hook (forgotten import entgen/runtime?)")
			}
			mut = vu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VideoUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VideoUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VideoUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vu *VideoUpdate) check() error {
	if v, ok := vu.mutation.Videotype(); ok {
		if err := video.VideotypeValidator(v); err != nil {
			return &ValidationError{Name: "videotype", err: fmt.Errorf(`entgen: validator failed for field "Video.videotype": %w`, err)}
		}
	}
	return nil
}

func (vu *VideoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   video.Table,
			Columns: video.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: video.FieldID,
			},
		},
	}
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: video.FieldUUID,
		})
	}
	if value, ok := vu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: video.FieldTitle,
		})
	}
	if value, ok := vu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: video.FieldDescription,
		})
	}
	if value, ok := vu.mutation.Videotype(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: video.FieldVideotype,
		})
	}
	if value, ok := vu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: video.FieldCreatedAt,
		})
	}
	if vu.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.GroupTable,
			Columns: []string{video.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.GroupTable,
			Columns: []string{video.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.StreamersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   video.StreamersTable,
			Columns: video.StreamersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedStreamersIDs(); len(nodes) > 0 && !vu.mutation.StreamersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   video.StreamersTable,
			Columns: video.StreamersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.StreamersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   video.StreamersTable,
			Columns: video.StreamersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.ModeratersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   video.ModeratersTable,
			Columns: video.ModeratersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedModeratersIDs(); len(nodes) > 0 && !vu.mutation.ModeratersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   video.ModeratersTable,
			Columns: video.ModeratersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.ModeratersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   video.ModeratersTable,
			Columns: video.ModeratersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   video.LikesTable,
			Columns: video.LikesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedLikesIDs(); len(nodes) > 0 && !vu.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   video.LikesTable,
			Columns: video.LikesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.LikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   video.LikesTable,
			Columns: video.LikesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.ViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   video.ViewersTable,
			Columns: video.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedViewersIDs(); len(nodes) > 0 && !vu.mutation.ViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   video.ViewersTable,
			Columns: video.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.ViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   video.ViewersTable,
			Columns: video.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{video.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// VideoUpdateOne is the builder for updating a single Video entity.
type VideoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VideoMutation
}

// SetUUID sets the "uuid" field.
func (vuo *VideoUpdateOne) SetUUID(u uuid.UUID) *VideoUpdateOne {
	vuo.mutation.SetUUID(u)
	return vuo
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableUUID(u *uuid.UUID) *VideoUpdateOne {
	if u != nil {
		vuo.SetUUID(*u)
	}
	return vuo
}

// SetTitle sets the "title" field.
func (vuo *VideoUpdateOne) SetTitle(s string) *VideoUpdateOne {
	vuo.mutation.SetTitle(s)
	return vuo
}

// SetDescription sets the "description" field.
func (vuo *VideoUpdateOne) SetDescription(s string) *VideoUpdateOne {
	vuo.mutation.SetDescription(s)
	return vuo
}

// SetVideotype sets the "videotype" field.
func (vuo *VideoUpdateOne) SetVideotype(v video.Videotype) *VideoUpdateOne {
	vuo.mutation.SetVideotype(v)
	return vuo
}

// SetCreatedAt sets the "created_at" field.
func (vuo *VideoUpdateOne) SetCreatedAt(t time.Time) *VideoUpdateOne {
	vuo.mutation.SetCreatedAt(t)
	return vuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableCreatedAt(t *time.Time) *VideoUpdateOne {
	if t != nil {
		vuo.SetCreatedAt(*t)
	}
	return vuo
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (vuo *VideoUpdateOne) SetGroupID(id int) *VideoUpdateOne {
	vuo.mutation.SetGroupID(id)
	return vuo
}

// SetNillableGroupID sets the "group" edge to the Group entity by ID if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableGroupID(id *int) *VideoUpdateOne {
	if id != nil {
		vuo = vuo.SetGroupID(*id)
	}
	return vuo
}

// SetGroup sets the "group" edge to the Group entity.
func (vuo *VideoUpdateOne) SetGroup(g *Group) *VideoUpdateOne {
	return vuo.SetGroupID(g.ID)
}

// AddStreamerIDs adds the "streamers" edge to the User entity by IDs.
func (vuo *VideoUpdateOne) AddStreamerIDs(ids ...int) *VideoUpdateOne {
	vuo.mutation.AddStreamerIDs(ids...)
	return vuo
}

// AddStreamers adds the "streamers" edges to the User entity.
func (vuo *VideoUpdateOne) AddStreamers(u ...*User) *VideoUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return vuo.AddStreamerIDs(ids...)
}

// AddModeraterIDs adds the "moderaters" edge to the User entity by IDs.
func (vuo *VideoUpdateOne) AddModeraterIDs(ids ...int) *VideoUpdateOne {
	vuo.mutation.AddModeraterIDs(ids...)
	return vuo
}

// AddModeraters adds the "moderaters" edges to the User entity.
func (vuo *VideoUpdateOne) AddModeraters(u ...*User) *VideoUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return vuo.AddModeraterIDs(ids...)
}

// AddLikeIDs adds the "likes" edge to the User entity by IDs.
func (vuo *VideoUpdateOne) AddLikeIDs(ids ...int) *VideoUpdateOne {
	vuo.mutation.AddLikeIDs(ids...)
	return vuo
}

// AddLikes adds the "likes" edges to the User entity.
func (vuo *VideoUpdateOne) AddLikes(u ...*User) *VideoUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return vuo.AddLikeIDs(ids...)
}

// AddViewerIDs adds the "viewers" edge to the User entity by IDs.
func (vuo *VideoUpdateOne) AddViewerIDs(ids ...int) *VideoUpdateOne {
	vuo.mutation.AddViewerIDs(ids...)
	return vuo
}

// AddViewers adds the "viewers" edges to the User entity.
func (vuo *VideoUpdateOne) AddViewers(u ...*User) *VideoUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return vuo.AddViewerIDs(ids...)
}

// Mutation returns the VideoMutation object of the builder.
func (vuo *VideoUpdateOne) Mutation() *VideoMutation {
	return vuo.mutation
}

// ClearGroup clears the "group" edge to the Group entity.
func (vuo *VideoUpdateOne) ClearGroup() *VideoUpdateOne {
	vuo.mutation.ClearGroup()
	return vuo
}

// ClearStreamers clears all "streamers" edges to the User entity.
func (vuo *VideoUpdateOne) ClearStreamers() *VideoUpdateOne {
	vuo.mutation.ClearStreamers()
	return vuo
}

// RemoveStreamerIDs removes the "streamers" edge to User entities by IDs.
func (vuo *VideoUpdateOne) RemoveStreamerIDs(ids ...int) *VideoUpdateOne {
	vuo.mutation.RemoveStreamerIDs(ids...)
	return vuo
}

// RemoveStreamers removes "streamers" edges to User entities.
func (vuo *VideoUpdateOne) RemoveStreamers(u ...*User) *VideoUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return vuo.RemoveStreamerIDs(ids...)
}

// ClearModeraters clears all "moderaters" edges to the User entity.
func (vuo *VideoUpdateOne) ClearModeraters() *VideoUpdateOne {
	vuo.mutation.ClearModeraters()
	return vuo
}

// RemoveModeraterIDs removes the "moderaters" edge to User entities by IDs.
func (vuo *VideoUpdateOne) RemoveModeraterIDs(ids ...int) *VideoUpdateOne {
	vuo.mutation.RemoveModeraterIDs(ids...)
	return vuo
}

// RemoveModeraters removes "moderaters" edges to User entities.
func (vuo *VideoUpdateOne) RemoveModeraters(u ...*User) *VideoUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return vuo.RemoveModeraterIDs(ids...)
}

// ClearLikes clears all "likes" edges to the User entity.
func (vuo *VideoUpdateOne) ClearLikes() *VideoUpdateOne {
	vuo.mutation.ClearLikes()
	return vuo
}

// RemoveLikeIDs removes the "likes" edge to User entities by IDs.
func (vuo *VideoUpdateOne) RemoveLikeIDs(ids ...int) *VideoUpdateOne {
	vuo.mutation.RemoveLikeIDs(ids...)
	return vuo
}

// RemoveLikes removes "likes" edges to User entities.
func (vuo *VideoUpdateOne) RemoveLikes(u ...*User) *VideoUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return vuo.RemoveLikeIDs(ids...)
}

// ClearViewers clears all "viewers" edges to the User entity.
func (vuo *VideoUpdateOne) ClearViewers() *VideoUpdateOne {
	vuo.mutation.ClearViewers()
	return vuo
}

// RemoveViewerIDs removes the "viewers" edge to User entities by IDs.
func (vuo *VideoUpdateOne) RemoveViewerIDs(ids ...int) *VideoUpdateOne {
	vuo.mutation.RemoveViewerIDs(ids...)
	return vuo
}

// RemoveViewers removes "viewers" edges to User entities.
func (vuo *VideoUpdateOne) RemoveViewers(u ...*User) *VideoUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return vuo.RemoveViewerIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VideoUpdateOne) Select(field string, fields ...string) *VideoUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Video entity.
func (vuo *VideoUpdateOne) Save(ctx context.Context) (*Video, error) {
	var (
		err  error
		node *Video
	)
	if len(vuo.hooks) == 0 {
		if err = vuo.check(); err != nil {
			return nil, err
		}
		node, err = vuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VideoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vuo.check(); err != nil {
				return nil, err
			}
			vuo.mutation = mutation
			node, err = vuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vuo.hooks) - 1; i >= 0; i-- {
			if vuo.hooks[i] == nil {
				return nil, fmt.Errorf("entgen: uninitialized hook (forgotten import entgen/runtime?)")
			}
			mut = vuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VideoUpdateOne) SaveX(ctx context.Context) *Video {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VideoUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VideoUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vuo *VideoUpdateOne) check() error {
	if v, ok := vuo.mutation.Videotype(); ok {
		if err := video.VideotypeValidator(v); err != nil {
			return &ValidationError{Name: "videotype", err: fmt.Errorf(`entgen: validator failed for field "Video.videotype": %w`, err)}
		}
	}
	return nil
}

func (vuo *VideoUpdateOne) sqlSave(ctx context.Context) (_node *Video, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   video.Table,
			Columns: video.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: video.FieldID,
			},
		},
	}
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entgen: missing "Video.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, video.FieldID)
		for _, f := range fields {
			if !video.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entgen: invalid field %q for query", f)}
			}
			if f != video.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: video.FieldUUID,
		})
	}
	if value, ok := vuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: video.FieldTitle,
		})
	}
	if value, ok := vuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: video.FieldDescription,
		})
	}
	if value, ok := vuo.mutation.Videotype(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: video.FieldVideotype,
		})
	}
	if value, ok := vuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: video.FieldCreatedAt,
		})
	}
	if vuo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.GroupTable,
			Columns: []string{video.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.GroupTable,
			Columns: []string{video.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.StreamersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   video.StreamersTable,
			Columns: video.StreamersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedStreamersIDs(); len(nodes) > 0 && !vuo.mutation.StreamersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   video.StreamersTable,
			Columns: video.StreamersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.StreamersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   video.StreamersTable,
			Columns: video.StreamersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.ModeratersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   video.ModeratersTable,
			Columns: video.ModeratersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedModeratersIDs(); len(nodes) > 0 && !vuo.mutation.ModeratersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   video.ModeratersTable,
			Columns: video.ModeratersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.ModeratersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   video.ModeratersTable,
			Columns: video.ModeratersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   video.LikesTable,
			Columns: video.LikesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedLikesIDs(); len(nodes) > 0 && !vuo.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   video.LikesTable,
			Columns: video.LikesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.LikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   video.LikesTable,
			Columns: video.LikesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.ViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   video.ViewersTable,
			Columns: video.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedViewersIDs(); len(nodes) > 0 && !vuo.mutation.ViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   video.ViewersTable,
			Columns: video.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.ViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   video.ViewersTable,
			Columns: video.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Video{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{video.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
